// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-794788004739538112"},"updated":{"$t":"2021-11-20T17:49:02.007+03:00"},"category":[{"term":"ардуино"},{"term":"подключение"},{"term":"энергопотребление"},{"term":"микросхема"},{"term":"прерывания"},{"term":"программатор"},{"term":"atmega328p"},{"term":"проект"},{"term":"энкодер вращения"},{"term":"lcd"},{"term":"tiny"},{"term":"ide"},{"term":"spi"},{"term":"дребезг контактов"},{"term":"arduino pro mini"},{"term":"загрузчик"},{"term":"RDA5807M"},{"term":"digispark"},{"term":"midi"},{"term":"датчик"},{"term":"пьезоизлучатель"},{"term":"Светодиодная матрица"},{"term":"блютуз"},{"term":"фоторезистор"}],"title":{"type":"text","$t":"Про Ардуино и не только"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE?alt=json-in-script\u0026max-results=6"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/search\/label\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE\/-\/%D0%B0%D1%80%D0%B4%D1%83%D0%B8%D0%BD%D0%BE?alt=json-in-script\u0026start-index=7\u0026max-results=6"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"32"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"6"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-2946466413588953046"},"published":{"$t":"2020-11-22T12:41:00.003+03:00"},"updated":{"$t":"2021-03-29T19:41:40.466+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энергопотребление"}],"title":{"type":"text","$t":"Кнопка включения питания для Ардуино"},"content":{"type":"html","$t":"\u003Cp\u003E\u003C\/p\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-9TBvq9moM4w\/X7oyJTusiqI\/AAAAAAAABUg\/Ep3An7rAWJs97xLvRz4xGP5-UgNxFxNcQCNcBGAsYHQ\/s614\/Arduino_PowerButton_Logo.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"538\" data-original-width=\"614\" src=\"https:\/\/1.bp.blogspot.com\/-9TBvq9moM4w\/X7oyJTusiqI\/AAAAAAAABUg\/Ep3An7rAWJs97xLvRz4xGP5-UgNxFxNcQCNcBGAsYHQ\/s320\/Arduino_PowerButton_Logo.png\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EПро подключение полевых транзисторов к Ардуино написано немало статей. Они помогают включать мощную нагрузку или, наоборот, отключать питание компонентов устройства для энергосбережения. Есть ещё одно интересное их применение, которое освещается значительно реже. Это программное отключение питания всего устройства (в том числе Ардуино \/ микроконтроллера) и включение его при нажатии на кнопку. Разумеется, речь о кнопке без фиксации. О том, как это реализовать, и пойдёт речь в данной публикации.\u003Cspan\u003E\u003C\/span\u003E\u003C\/p\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cp\u003E\u003C\/p\u003E\u003Ch2 style=\"line-height: normal; text-align: left;\"\u003EПринцип работы\u003C\/h2\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EИдея довольно простая: питание на Ардуино и остальную периферию подаётся через ключ, в роли которого будет использоваться полевой МДП транзистор (MOSFET). В обычном состоянии транзистор удерживается закрытым, ток через него не течёт и устройство выключено. Чтобы включить устройство, необходимо открыть транзистор, нажав на кнопку. Чтобы в дальнейшем он не закрылся при отпускании кнопки, эстафету перенимает уже включившаяся Ардуино. Она выставляет на одном из цифровых выводов сигнал нужного уровня для удержания транзистора в открытом состоянии. При снятии этого сигнала транзистор закроется и устройство выключится.\u003C\/p\u003E\u003Ch2 style=\"line-height: normal; text-align: left;\"\u003EСхема\u003C\/h2\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EРеализовать описанное поведение можно разными способами. Кто-то скажет, что достаточно пары резисторов и одного MOSFET’а, затвором которого управляет Ардуино. Такой вариант не всегда окажется рабочим: может получиться так, что транзистор не закроется полностью и продолжит питать Ардуино. Более надёжной является схема, в которой полевой транзистор управляется биполярным. Пример такого ключа и его подключение к Ардуино представлены ниже:\u003C\/p\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-O6a3gQpN5kA\/X61Z-BFNz5I\/AAAAAAAABTA\/gM-eBIiJjRcUwQ3GsT4Z_HbodW-Ci6PGQCNcBGAsYHQ\/s842\/PowerOn_Button.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"400\" data-original-width=\"842\" height=\"304\" src=\"https:\/\/1.bp.blogspot.com\/-O6a3gQpN5kA\/X61Z-BFNz5I\/AAAAAAAABTA\/gM-eBIiJjRcUwQ3GsT4Z_HbodW-Ci6PGQCNcBGAsYHQ\/w640-h304\/PowerOn_Button.png\" title=\"Схема включения питания при нажатии кнопки\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-fmsfkAYO5Rk\/X7PkMgo7tnI\/AAAAAAAABT4\/Fghj6xQMtxE8ErfXQTwAfQcmUgLtxUsfgCNcBGAsYHQ\/s1776\/Arduino_PowerOn_Button.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"1425\" data-original-width=\"1776\" height=\"514\" src=\"https:\/\/1.bp.blogspot.com\/-fmsfkAYO5Rk\/X7PkMgo7tnI\/AAAAAAAABT4\/Fghj6xQMtxE8ErfXQTwAfQcmUgLtxUsfgCNcBGAsYHQ\/w640-h514\/Arduino_PowerOn_Button.png\" title=\"Включение питания Ардуино при нажатии кнопки\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EЗдесь P-канальный MOSFET Q1 открывается либо кнопкой, либо биполярным NPN транзистором Q2. Последний открывается при подаче на базу логической единицы через токоограничивающий резистор R2. Подтягивающий резистор R1 нужен для удержания полевого транзистора в закрытом состоянии при отсутствии управляющего сигнала.\u003C\/div\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EВыбор в пользу P-канального полевого транзистора обусловлен тем, что он позволяет отключать от нагрузки линию Vcc. N-канальный транзистор отсоединяет землю - это не лучший вариант для схем управления питанием.\u003C\/p\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EО выборе компонентов и номиналов. Полевой транзистор следует выбирать с малым сопротивлением канала (параметр Rds). Также обратите внимание на его предельные значения напряжения сток-исток (Vds) и тока (Id), они должны соответствовать требованиям устройства. У меня из P-канальных под рукой только CJ2301 в smd корпусе, он рассчитан на напряжение 20В и ток до 2.3А, сопротивление канала составляет 0.09Ом – этого вполне достаточно для многих устройств на Ардуино. В качестве Q2 подойдёт, пожалуй, любой биполярный транзистор малой мощности. Например, популярный 2N3904. Что касается номиналов резисторов, то я использую порядка 50кОм.\u003C\/p\u003E\u003Ch2 style=\"line-height: normal; text-align: left;\"\u003EСкетч\u003C\/h2\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EЗадача скетча описана ранее в принципах работы: сразу после включения выставить значение HIGH на цифровом выводе, в данном случае D2. После этого можно выполнять какие-либо действия: опрашивать датчики, выводить информацию и тому подобное. А когда мы решим выключить питание, изменяем состояние вывода D2 на LOW. Пример такого скетча приведён ниже. Для демонстрации его работы я добавил в схему текстовый LCD дисплей.\u003C\/p\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E16\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E PIN_POWERON 2 \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Пин управления питанием\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Первым делом настраиваем пин PIN_POWERON как OUTPUT\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ и выставляем на нём высокий уровень\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EOUTPUT\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EHIGH\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Дальше делаем что нам нужно\u003C\/span\u003E\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Shutdown after\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E3\u003C\/span\u003E; i \u0026gt; \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E; i--) {\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EsetCursor\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E7\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(i);\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1000\u003C\/span\u003E);\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ А когда решим выключить питание, выставляем LOW\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELOW\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"1\" class=\"BLOG_video_class\" height=\"360\" src=\"https:\/\/www.youtube.com\/embed\/QDEKuhJcs5o\" width=\"640\" youtube-src-id=\"QDEKuhJcs5o\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"line-height: normal; text-align: left;\"\u003EДругой вариант схемы\u003C\/h2\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EРассмотрим еще один вариант схемы включения питания. От предыдущего он отличается тем, что кнопка подключена к выводу Ардуино и её можно опрашивать. Таким образом, включение может осуществляться одной из кнопок, уже используемых в устройстве.\u003C\/p\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-JleobBeGY3k\/X61brh9JrJI\/AAAAAAAABTo\/Qbhdrh8ii9kNIhmkoXI44DblwZ-5JxFAQCNcBGAsYHQ\/s830\/PowerOn_Button_v2.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"482\" data-original-width=\"830\" height=\"372\" src=\"https:\/\/1.bp.blogspot.com\/-JleobBeGY3k\/X61brh9JrJI\/AAAAAAAABTo\/Qbhdrh8ii9kNIhmkoXI44DblwZ-5JxFAQCNcBGAsYHQ\/w640-h372\/PowerOn_Button_v2.png\" title=\"Схема включения питания при нажатии кнопки\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-jCdPKSCv_p0\/X7Pk9LSRHlI\/AAAAAAAABUE\/XkGTD4YBWCQOY-lPpNykX01antp9LwwnQCNcBGAsYHQ\/s1776\/Arduino_PowerOn_Button_v2.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"1425\" data-original-width=\"1776\" height=\"514\" src=\"https:\/\/1.bp.blogspot.com\/-jCdPKSCv_p0\/X7Pk9LSRHlI\/AAAAAAAABUE\/XkGTD4YBWCQOY-lPpNykX01antp9LwwnQCNcBGAsYHQ\/w640-h514\/Arduino_PowerOn_Button_v2.png\" title=\"Включение питания Ардуино при нажатии кнопки\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003EЗдесь вывод D3, подключенный к кнопке, \"изолирован\" от полевого транзистора биполярным транзистором Q3 и не мешает ему закрываться при отсутствии управляющего сигнала. При нажатии на кнопку, во-первых, откроется транзистор Q3 и затем Q1 (если он ещё не открыт), т.е. будет включено питание устройства; во-вторых, сигнал на входе D3 изменится от LOW к HIGH, что может быть зафиксировано при его опросе.\u003C\/div\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EРезистор R4 между кнопкой и линией питания необязателен. Но если вывод D3 по ошибке\u0026nbsp;будет настроен как OUTPUT и на нём будет значение LOW, то при нажатии на кнопку через него потечет ток и он не будет ничем ограничен. Напоминаю, что предельно допустимый ток через вывод AVR микроконтроллеров составляет 40мА.\u0026nbsp;И его превышение приведёт к повреждению микроконтроллера. Резистор между кнопкой и Ардуино поможет избежать этого.\u003C\/p\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003EЛогика скетча для данной схемы не отличается от предыдущего. Высокий уровень на выводе D2 удерживает полевой транзистор открытым. А с кнопкой работаем как обычно: можем опрашивать её в скетче или использовать для генерации прерываний.\u003C\/p\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E16\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E PIN_POWERON 2 \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Пин управления питанием\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E PIN_BTN 3 \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Пин кнопки\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Настраиваем пин PIN_POWERON как OUTPUT и выставляем на нём высокий уровень\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EOUTPUT\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EHIGH\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Push to shutdown\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalRead\u003C\/span\u003E(PIN_BTN) == \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EHIGH\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ На случай, если кнопку ещё не отпустили\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalRead\u003C\/span\u003E(PIN_BTN) == \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELOW\u003C\/span\u003E);  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Ожидаем нажатия кнопки для продолжения\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eclear\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Shutdown after\"\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eunsigned\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Elong\u003C\/span\u003E tm;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ По завершении цикла for питание будет выключено\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E; i \u0026gt; \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E; i--) {\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EsetCursor\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E7\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(i);\u003Cbr \/\u003E    tm = \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Emillis\u003C\/span\u003E();\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Emillis\u003C\/span\u003E() - tm \u0026lt; \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1000\u003C\/span\u003E) {\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalRead\u003C\/span\u003E(PIN_BTN) == \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EHIGH\u003C\/span\u003E) \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ereturn\u003C\/span\u003E; \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Нажатие на кнопку начинает цикл заново\u003C\/span\u003E\u003Cbr \/\u003E    }\u003Cbr \/\u003E  }\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выключаем питание, установив LOW на выводе PIN_POWERON\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(PIN_POWERON, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELOW\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"BLOG_video_class\" height=\"360\" src=\"https:\/\/www.youtube.com\/embed\/w74fU4Bz7XQ\" width=\"640\" youtube-src-id=\"w74fU4Bz7XQ\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cp class=\"MsoNormal\" style=\"line-height: normal; mso-margin-bottom-alt: auto; mso-margin-top-alt: auto;\"\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ch2 style=\"line-height: normal; text-align: left;\"\u003EГде это может пригодиться\u003C\/h2\u003E\u003Cdiv\u003EОписанные способы управления питанием отлично подойдут для устройств, работающих на батарейках или аккумуляторах, если вы хотите использовать в них плату Ардуино, а не отдельный микроконтроллер. И даже в случае использования микроконтроллера это всё ещё хорошая альтернатива спящему режиму, поскольку отключаются сразу все компоненты устройства.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЕщё один вариант использования приведённых схем - это включение питания при удержании кнопки нажатой: достаточно добавить задержку на пару секунд в начало функции setup. Если за это время кнопка не будет отпущена, то питание будет удерживаться уже самой Ардуинкой - хороший приём для избежания случайных включений устройства.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/2946466413588953046\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/11\/power-button.html#comment-form","title":"Комментарии: 3"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2946466413588953046"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2946466413588953046"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/11\/power-button.html","title":"Кнопка включения питания для Ардуино"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-9TBvq9moM4w\/X7oyJTusiqI\/AAAAAAAABUg\/Ep3An7rAWJs97xLvRz4xGP5-UgNxFxNcQCNcBGAsYHQ\/s72-c\/Arduino_PowerButton_Logo.png","height":"72","width":"72"},"thr$total":{"$t":"3"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-4318166082941340124"},"published":{"$t":"2020-09-19T18:32:00.003+03:00"},"updated":{"$t":"2020-09-19T18:32:58.350+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"прерывания"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энергопотребление"}],"title":{"type":"text","$t":"DS3231 - будильник для Ардуино"},"content":{"type":"html","$t":"\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-rZD89BKegH4\/X2Ye48kmM0I\/AAAAAAAABRM\/xG6aGxr69uIjAgRnxu0Y1RFBfjCNjq5AQCNcBGAsYHQ\/s614\/arduino_alarm.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"538\" data-original-width=\"614\" height=\"280\" src=\"https:\/\/1.bp.blogspot.com\/-rZD89BKegH4\/X2Ye48kmM0I\/AAAAAAAABRM\/xG6aGxr69uIjAgRnxu0Y1RFBfjCNjq5AQCNcBGAsYHQ\/w320-h280\/arduino_alarm.png\" title=\"DS3231 - будильник для Ардуино\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cp\u003EВ данной публикации я расскажу об использовании RTC модуля на базе DS3231 для вывода Ардуино (или отдельного микроконтроллера) из режима энергосбережения. Можно сказать, будем делать будильник для Ардуино.\u003C\/p\u003E\u003Cspan\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003C\/span\u003E\u003Cp\u003EМикросхема DS3231 - это высокоточные часы реального времени с I2C интерфейсом, встроенным кварцевым генератором и температурной компенсацией. Как и другие подобные микросхемы DS3231 имеет два входа питания: основной и резервный для подключения батарейки или суперконденсатора. Рекомендуемое напряжение питания 2.3В .. 5.5В. Точность хода часов составляет\u0026nbsp;±3.5ppm при работе в температурном диапазоне от -40°C до +85°C, что обеспечивает отклонение не более, чем на 2 минуты за год - это, действительно, хороший показатель. Кроме учета времени в данной микросхеме реализованы два будильника и программируемый генератор прямоугольных импульсов. Ссылка на даташит:\u0026nbsp;\u003Ca href=\"https:\/\/datasheets.maximintegrated.com\/en\/ds\/DS3231.pdf\" target=\"_blank\"\u003Ehttps:\/\/datasheets.maximintegrated.com\/en\/ds\/DS3231.pdf\u003C\/a\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ch2 style=\"text-align: left;\"\u003EПочему именно DS3231?\u003C\/h2\u003E\u003Cp\u003EУ тех же\u0026nbsp;Maxim\/Dallas Semiconductor номенклатура RTC устройств насчитывает десятки микросхем. Среди них немало достойных моделей. И при желании их, конечно, можно купить, например, в\u0026nbsp;ЧИП и ДИП. Но всё же большинство покупаемых деталей - это Аликспресс, а что он предлагает нам\u0026nbsp;на запрос RTC? - Убогий DS1302, DS1307 и\u0026nbsp;DS3231, что-то другое встречается значительно реже. Из указанных трёх микросхем будильник есть только в DS3231. Таким образом, DS3231 - это наиболее доступная микросхема (или модуль) RTC с функцией будильника и высокой точностью.\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ch2 style=\"text-align: left;\"\u003EПодключение DS3231 к Ардуино\u003C\/h2\u003E\u003Cp\u003EОбщение с DS3231 осуществляется по линиям I2C. Схема подключения RTC модуля на DS3231 к Ардуино Уно приведена ниже.\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-4-rrkN0XEHQ\/X1nVaskfz8I\/AAAAAAAABP8\/HNyBIAXVjLc6qU2UVrcZORYdEL_HZju9ACNcBGAsYHQ\/s1438\/ds3231.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"700\" data-original-width=\"1438\" height=\"305\" src=\"https:\/\/1.bp.blogspot.com\/-4-rrkN0XEHQ\/X1nVaskfz8I\/AAAAAAAABP8\/HNyBIAXVjLc6qU2UVrcZORYdEL_HZju9ACNcBGAsYHQ\/w625-h305\/ds3231.png\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПодключение DS3231 к Ардуино для работы с будильником\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cp\u003EЕсли бы нас интересовало только текущее время, то достаточно было бы подключить VCC, GND, SCL и SDA модуля к соответствующим выводам Ардуино. В данном же случае нам нужен ещё вывод INT\/SQW. На нём будет генерироваться сигнал запроса прерывания для пробуждения микроконтроллера. Поэтому проще всего подключить его к входу внешнего прерывания, для УНО это D2 и D3. Хотя можно использовать и другие выводы, разрешив на них PCINT.\u003C\/p\u003E\u003Cp\u003EКстати, на моём модуле не было вывода INT\/SQW. При этом в штыревом разъеме один из выводов был не задействован. Я подпаял его к третьей ножке микросхемы DS3231 (это и есть INT\/SQW) и получил нужный мне вывод на штыревом разъеме модуля.\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/--SReFc3yfqo\/X2XKoEA8J2I\/AAAAAAAABQ0\/GETmGqdAuhIgHNzI3D288wYUvuC8PP1BgCNcBGAsYHQ\/s1280\/DS3231_without_SQW.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"619\" data-original-width=\"1280\" height=\"310\" src=\"https:\/\/1.bp.blogspot.com\/--SReFc3yfqo\/X2XKoEA8J2I\/AAAAAAAABQ0\/GETmGqdAuhIgHNzI3D288wYUvuC8PP1BgCNcBGAsYHQ\/w640-h310\/DS3231_without_SQW.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EДобавление недостающего вывода INT\/SQW на модуле DS3231\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EБиблиотека для DS3231\u003C\/h2\u003E\u003Cp\u003EЯ использую библиотеку\u0026nbsp;\u003Ca href=\"https:\/\/github.com\/jarzebski\/Arduino-DS3231\" target=\"_blank\"\u003Ehttps:\/\/github.com\/jarzebski\/Arduino-DS3231\u003C\/a\u003E, она поддерживает все функции DS3231 и не требует установки других библиотек. Предлагаю и вам скачать данную библиотеку и добавить её в среду разработки Ардуино. В ней есть несколько полезных примеров. Для сейчас интересует пример DS3231_intalarm, показывающий, как установить будильник и генерировать им внешнее прерывание. Правда в примере раскрыты не все опции библиотеки, поэтому я немного подправил его и привел ниже для рассмотрения. Залейте его в Ардуино и откройте монитор порта. Модуль DS3231 должен быть подключен к Ардуино по приведённой выше схеме.\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;DS3231.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EDS3231 clock;\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evolatile\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eboolean\u003C\/span\u003E isAlarm = false;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E alarmFunction() {\u003Cbr \/\u003E  isAlarm = true;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E9600\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Инициализация RTC, сброс будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  clock.enableOutput(false); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ INT\/SQW используем для генерации прерываний\u003C\/span\u003E\u003Cbr \/\u003E  clock.armAlarm1(false);    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Запрещаем прерывания от будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.armAlarm2(false);\u003Cbr \/\u003E  clock.clearAlarm1();       \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сбрасываем флаги будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.clearAlarm2();\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выставляем время\u003C\/span\u003E\u003Cbr \/\u003E  clock.setDateTime(__DATE__, __TIME__); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Используем время компиляции\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setDateTime(2020, 9, 11, 12, 0, 0); \/\/ Выставляем время вручную: 11.09.2020 12:00:00\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выставляем будильник 1\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm1(0, 0, 0, 0, DS3231_EVERY_SECOND);   \/\/ Сигнал каждую секунду\u003C\/span\u003E\u003Cbr \/\u003E  clock.setAlarm1(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, DS3231_MATCH_S);         \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сигнал в 20 секунд каждой минуты\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm1(0, 0, 30, 20, DS3231_MATCH_M_S);    \/\/ Сигнал в 30 минут и 20 секунд каждого часа\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm1(0, 12, 30, 20, DS3231_MATCH_H_M_S); \/\/ Сигнал ежедневно в 12:30:20\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm1(10, 12, 30, 20, DS3231_MATCH_DT_H_M_S); \/\/ Сигнал 10 числа в 12:30:20\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm1(4, 12, 30, 20, DS3231_MATCH_DY_H_M_S);  \/\/ Сигнал по четвергам в 12:30:20\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выставляем будильник 2\u003C\/span\u003E\u003Cbr \/\u003E  clock.setAlarm2(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, DS3231_EVERY_MINUTE);        \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сигнал каждую минуту\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm2(0, 0, 30, DS3231_MATCH_M);          \/\/ Сигнал в 30 минут каждого часа\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm2(0, 12, 30, DS3231_MATCH_H_M);       \/\/ Сигнал каждый день в 12:30:00\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm2(10, 12, 30, DS3231_MATCH_DT_H_M);   \/\/ Сигнал 10 числа в 12:30:00\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm2(10, 12, 30, DS3231_MATCH_DT_H_M);   \/\/ Сигнал 10 числа в 12:30:00\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/clock.setAlarm2(4, 12, 30, DS3231_MATCH_DY_H_M);    \/\/ Сигнал по четвергам в 12:30:00\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Разрешаем внешнее прерывание по сигналу будильника\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EINPUT_PULLUP\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Вход нужно подтянуть к питанию\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EattachInterrupt\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, alarmFunction, FALLING); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Разрешаем прерывание\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  RTCDateTime dt = clock.getDateTime(); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Получаем текущее время\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprintln\u003C\/span\u003E(clock.dateFormat(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"d-m-Y H:i:s - l\"\u003C\/span\u003E, dt)); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выводим его в Serial\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (isAlarm) { \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сработал будильник\u003C\/span\u003E\u003Cbr \/\u003E    isAlarm = false;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Если задействованы оба будильника, то нужна проверка, какой из них сработал\u003C\/span\u003E\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (clock.isAlarm1()) { \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сработал первый будильник\u003C\/span\u003E\u003Cbr \/\u003E      clock.clearAlarm1();\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprintln\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"*** Alarm 1 ***\"\u003C\/span\u003E);\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (clock.isAlarm2()) { \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сработал второй будильник\u003C\/span\u003E\u003Cbr \/\u003E      clock.clearAlarm2();\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprintln\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"*** Alarm 2 ***\"\u003C\/span\u003E);\u003Cbr \/\u003E    }\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1000\u003C\/span\u003E);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cp\u003EПеред настройкой будильников необходимо запретить их работу и сбросить флаги. Это делается в начале функции setup. Далее выставляется время, это может быть сделано с использованием времени компиляции скетча или вручную. Далее настраиваем будильники. В DS3231 их два, первый может быть настроен с точностью до секунд, второй до минут. В скетче я привел все возможные варианты их установки. После этого остаётся разрешить внешнее прерывание и привязать для него обработчик. В данном скетче обработчик устанавливает переменную\u0026nbsp;isAlarm, что будет говорить о срабатывании будильника.\u003C\/p\u003E\u003Cp\u003EФункция loop проверяет значение переменной isAlarm и, если она установлена, определяет какой из будильников сработал. В результате мы видим в мониторе порта сообщения \"Alarm 1\" и \"Alarm 2\":\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-5Q65VlBDjYY\/X1tdVwM0otI\/AAAAAAAABQI\/Wf7LQGsrJxA68DPqHLZojkgloMtWMlr7wCNcBGAsYHQ\/s800\/Example_output.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"504\" data-original-width=\"800\" height=\"403\" src=\"https:\/\/1.bp.blogspot.com\/-5Q65VlBDjYY\/X1tdVwM0otI\/AAAAAAAABQI\/Wf7LQGsrJxA68DPqHLZojkgloMtWMlr7wCNcBGAsYHQ\/w640-h403\/Example_output.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример вывода при пробуждении Ардуино\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EГенерировать прерывания DS3231 может не только с помощью будильников, но и программируемым генератором прямоугольных импульсов. Генератор может быть настроен на частоту 1Гц,\u0026nbsp;4.096кГц,\u0026nbsp;8.192кГц и\u0026nbsp;32.768кГц. Поскольку в DS3231 применён термокомпенсированный генератор, то и частота импульсов будет достаточно стабильна. Выводятся они на всё тот же INT\/SQW. В папке с примерами есть скетч DS3231_sqw_32khz, показывающий, как настраивать DS3231 на генерацию нужной частоты.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003EРазобравшись с использованием часов DS3231 для генерации запроса прерывания, переходим к нашей главной задаче - пробуждению Ардуино.\u003Cdiv\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EИспользование DS3231 для пробуждения Ардуино\u003C\/h2\u003E\u003Cp\u003EИтак, наша задача - перевести Ардуино в режим энергосбережения и периодически просыпаться по будильнику для выполнения каких-то действий. Попробуем, например, мигать встроенным светодиодом при пробуждении Ардуино. Практически всё, что нам для этого нужно, уже есть в приведённом выше скетче. Остаётся лишь добавить переход в режим энергосбережения:\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;avr\/sleep.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;DS3231.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EDS3231 clock;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E alarmFunction() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Обработчик ничего не делает\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Инициализация RTC, сброс будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  clock.enableOutput(false); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ INT\/SQW используем для генерации прерываний\u003C\/span\u003E\u003Cbr \/\u003E  clock.armAlarm1(false);    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Запрещаем прерывания от будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.armAlarm2(false);\u003Cbr \/\u003E  clock.clearAlarm1();       \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сбрасываем флаги будильников\u003C\/span\u003E\u003Cbr \/\u003E  clock.clearAlarm2();\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Выставляем будильник 1\u003C\/span\u003E\u003Cbr \/\u003E  clock.setAlarm1(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E10\u003C\/span\u003E, DS3231_MATCH_S); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сигнал в 10 секунд каждой минуты\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Разрешаем внешнее прерывание по сигналу будильника\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EINPUT_PULLUP\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Вход нужно подтянуть к питанию\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EattachInterrupt\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, alarmFunction, FALLING); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Разрешаем прерывание\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E13\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EOUTPUT\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Светодиод на 13 выводе\u003C\/span\u003E\u003Cbr \/\u003E  ADCSRA \u0026amp;= ~(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E \u0026lt;\u0026lt; ADEN); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Отключаем АЦП\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/Переходим в режим энергосбережения\u003C\/span\u003E\u003Cbr \/\u003E  set_sleep_mode(SLEEP_MODE_PWR_DOWN);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EnoInterrupts\u003C\/span\u003E();\u003Cbr \/\u003E  sleep_enable();\u003Cbr \/\u003E  MCUCR = \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebit\u003C\/span\u003E (BODS) | \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebit\u003C\/span\u003E (BODSE);\u003Cbr \/\u003E  MCUCR = \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebit\u003C\/span\u003E (BODS);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Einterrupts\u003C\/span\u003E();\u003Cbr \/\u003E  sleep_cpu();\u003Cbr \/\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Проснулись\u003C\/span\u003E\u003Cbr \/\u003E  sleep_disable();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Проверка флага будильника может оказаться полезной\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ на случай пробуждения по другой причине\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (clock.isAlarm1()) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Будильник 1, действительно, сработал\u003C\/span\u003E\u003Cbr \/\u003E    clock.clearAlarm1(); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сбрасываем его флаг\u003C\/span\u003E\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Включаем светодиод на 2 секунды\u003C\/span\u003E\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E13\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EHIGH\u003C\/span\u003E);\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2000\u003C\/span\u003E);\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E13\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELOW\u003C\/span\u003E);\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Можно спать дальше\u003C\/span\u003E\u003Cbr \/\u003E  }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cp\u003EВ данном примере будильник 1 устанавливается на срабатывание в 10 секунд каждой минуты, после чего Ардуино переводится в режим энергосбережения. Доступные для Ардуино (ATmega328P) режимы энергосбережения, а также события, пробуждающие микроконтроллер, я приводил в статье\u0026nbsp;\u003Ca href=\"http:\/\/tsibrov.blogspot.com\/2018\/02\/arduino-power-down.html\" target=\"_blank\"\u003EРежимы энергосбережения Ардуино\u003C\/a\u003E. Проснувшись, не лишним будет\u0026nbsp;проверить флаг будильника,\u0026nbsp;чтобы убедиться, что именно он нас разбудил. Если флаг будильника 1 установлен, то можем выполнять наш код, в данном случае - включение и выключение светодиода.\u003C\/p\u003E\u003Cp\u003EБудильник не обязательно должен настраиваться единожды, как в приведённых выше скетчах. Его можно менять хоть при каждом срабатывании. Так можно добиться пробуждения Ардуино через определённый интервал времени. Например, чтобы будильник срабатывал каждые 10 минут, его нужно выставлять при каждом пробуждении на \u003Ci\u003Eтекущее время + 10 минут\u003C\/i\u003E. Это потребует минимальных изменений приведённого выше скетча:\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E    ...\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Будильник 1, действительно, сработал\u003C\/span\u003E\u003Cbr \/\u003E    clock.clearAlarm1(); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сбрасываем его флаг\u003C\/span\u003E\u003Cbr \/\u003E    RTCDateTime dt = clock.getDateTime(); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Получаем текущее время\u003C\/span\u003E\u003Cbr \/\u003E    clock.setAlarm1(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, (dt.minute + \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E10\u003C\/span\u003E) % \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E60\u003C\/span\u003E, dt.second, DS3231_MATCH_M_S); \u003Cspan class=\"hljs-comment\" color=\"rgba(149, 165, 166, 0.8)\"\u003E\/\/ Сигнал через 10 минут\u003C\/span\u003E\u003Cbr \/\u003E    ...\u003C\/pre\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cp\u003EПолный пример такого скетча вы можете скачать по \u003Ca href=\"https:\/\/drive.google.com\/file\/d\/1Va88VFVt0zTVueccp1fzK9HCyRaj4cwW\/view?usp=sharing\" target=\"_blank\"\u003Eссылке\u003C\/a\u003E.\u0026nbsp;\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ch2 style=\"text-align: left;\"\u003EЭнергопотребление DS3231\u003C\/h2\u003E\u003Cp\u003EЕсли мы хотим использовать DS3231 для вывода микроконтроллера из режима энергосбережения, то неплохо бы разобраться с потреблением и самих часов. Обратимся для этого к даташиту. В нём нас интересуют две таблицы\u0026nbsp;Electrical Characteristics. Первая для случая, когда источником питания служит вход V\u003Csub\u003ECC\u003C\/sub\u003E, вторая - питание от V\u003Csub\u003EBAT\u003C\/sub\u003E, то есть от батарейки. Небольшая выжимка из этих таблиц приведена ниже:\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Ctable border=\"1\" cellspacing=\"0\" style=\"border-color: black; width: 100%;\"\u003E\u003Ctbody\u003E\u003Ctr style=\"height: 58px;\"\u003E\u003Ctd style=\"height: 58px; width: 152px;\"\u003E\u003Cstrong\u003EПараметр\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"height: 58px; width: 111px;\"\u003E\u003Cstrong\u003EОбозначение\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd colspan=\"2\" style=\"height: 58px; text-align: center; width: 266px;\"\u003E\u003Cstrong\u003EУсловия\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"height: 58px; width: 106.6px;\"\u003E\u003Cp\u003E\u003Cstrong\u003EМаксимальное \u003C\/strong\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cstrong\u003Eзначение\u003C\/strong\u003E\u003C\/p\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 31px;\"\u003E\u003Ctd colspan=\"5\" style=\"height: 31px; text-align: center; width: 635.6px;\"\u003E\u003Cstrong\u003EПитание от Vcc\u003C\/strong\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 20.6px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 39.6px; width: 152px;\"\u003EActive Supply Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 39.6px; width: 111px;\"\u003E\u0026nbsp;I\u003Csub\u003ECCA\u003C\/sub\u003E\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 39.6px; width: 159px;\"\u003EF\u003Csub\u003ESCL\u003C\/sub\u003E\u0026nbsp;= 400МГц\u003C\/td\u003E\u003Ctd style=\"height: 20.6px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 20.6px; text-align: center; width: 106.6px;\"\u003E200мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 19px;\"\u003E\u003Ctd style=\"height: 19px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 19px; text-align: center; width: 106.6px;\"\u003E300мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 152px;\"\u003EStandby Supply Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 111px;\"\u003E\u0026nbsp;I\u003Csub\u003ECCS\u003C\/sub\u003E\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 159px;\"\u003E\u003Cp\u003EI2C неактивна,\u003C\/p\u003E\u003Cp\u003EВывод 32кГц разрешён,\u003C\/p\u003E\u003Cp\u003EМеандр (SQW) запрещён\u003C\/p\u003E\u003C\/td\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E110мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E170мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 152px;\"\u003ETemperature Conversion Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 111px;\"\u003E\u0026nbsp;I\u003Csub\u003ECCSCONV\u003C\/sub\u003E\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 34px; width: 159px;\"\u003E\u003Cp\u003EI2C неактивна,\u003C\/p\u003E\u003Cp\u003EВывод 32кГц разрешён,\u003C\/p\u003E\u003Cp\u003EМеандр (SQW) запрещён\u003C\/p\u003E\u003C\/td\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E575мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003ECC\u003C\/sub\u003E = 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E650мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 28px;\"\u003E\u003Ctd colspan=\"5\" style=\"height: 28px; text-align: center; width: 635.6px;\"\u003E\u003Cstrong\u003EПитание от V\u003Csub\u003EBAT\u003C\/sub\u003E\u003C\/strong\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 152px;\"\u003EActive Battery Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 111px;\"\u003E\u0026nbsp;I\u003Csub\u003EBATA\u003C\/sub\u003E\u0026nbsp;\u0026nbsp;\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 159px;\"\u003E\u003Cp\u003EF\u003Csub\u003ESCL\u003C\/sub\u003E\u0026nbsp;= 400МГц,\u003C\/p\u003E\u003Cp\u003EМеандр (SQW) запрещён\u003C\/p\u003E\u003C\/td\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E\u0026nbsp;= 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E70мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E\u0026nbsp;= 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E\u0026nbsp;150мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 152px;\"\u003ETimekeeping Battery Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 111px;\"\u003E\u0026nbsp;\u0026nbsp;I\u003Csub\u003EBATT\u003C\/sub\u003E\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 159px;\"\u003EI2C неактивна, \u003Cp\u003EВывод 32кГц разрешён,\u003C\/p\u003E\u003Cp\u003EМеандр (SQW) запрещён\u003C\/p\u003E\u003C\/td\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E = 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E3мкА\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E = 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E\u0026nbsp;3.5мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 152px;\"\u003ETemperature Conversion Current\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 111px;\"\u003E\u0026nbsp;I\u003Csub\u003EBATTC\u003C\/sub\u003E\u003C\/td\u003E\u003Ctd rowspan=\"2\" style=\"height: 17px; width: 159px;\"\u003EI2C неактивна, \u003Cp\u003EМеандр (SQW) запрещён\u003C\/p\u003E\u003C\/td\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E = 3.63В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E575мкА\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr style=\"height: 17px;\"\u003E\u003Ctd style=\"height: 17px; width: 107px;\"\u003EV\u003Csub\u003EBAT\u003C\/sub\u003E = 5.5В\u003C\/td\u003E\u003Ctd style=\"height: 17px; text-align: center; width: 106.6px;\"\u003E650мкА\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cb\u003EActive Supply Current\u003C\/b\u003E - это среднее значение тока, потребляемого микросхемой DS3231 при работающей шине I2C (причем на максимальной частоте - 400кГц), с учётом тока измерения температуры.\u003C\/p\u003E\u003Cp\u003E\u003Cb\u003EStandby Supply Current\u003C\/b\u003E отражает среднее потребление DS3231 при неактивной шине I2C, разрешённом выводе частоты 32кГц и с запрещённым меандром SQW. Данное значение также включает в себя ток при измерении температуры.\u003C\/p\u003E\u003Cp\u003E\u003Cb\u003ETemperature Conversion Current\u003C\/b\u003E - ток, потребляемый микросхемой в момент измерения температуры. Измерения выполняются при подаче питания и далее каждые 64 секунды для подстройки частоты генератора. Время измерения температуры (параметр T\u003Csub\u003ECONV\u003C\/sub\u003E\u0026nbsp;- Temperature Conversion Time) не превышает 200мс.\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cp\u003E\u003Cb\u003EActive Battery Current\u003C\/b\u003E - среднее значение тока, потребляемого DS3231 при питании от V\u003Csub\u003EBAT\u003C\/sub\u003E, работающей шине I2C, с учетом тока при измерении температуры.\u003C\/p\u003E\u003Cp\u003E\u003Cb\u003ETimekeeping Battery Current\u003C\/b\u003E - среднее значение тока, потребляемого DS3231 при питании от V\u003Csub\u003EBAT\u003C\/sub\u003E, при неактивной шине I2C, с учетом тока при измерении температуры.\u003C\/p\u003E\u003Cp\u003EПереключение источника питания с V\u003Csub\u003ECC\u003C\/sub\u003E\u0026nbsp;на V\u003Csub\u003EBAT\u003C\/sub\u003E\u0026nbsp;происходит при выполнении двух условий: V\u003Csub\u003ECC\u003C\/sub\u003E\u0026nbsp;\u0026lt; V\u003Csub\u003EPF\u003C\/sub\u003E\u0026nbsp;и V\u003Csub\u003ECC\u003C\/sub\u003E\u0026nbsp;\u0026lt; V\u003Csub\u003EBAT\u003C\/sub\u003E. V\u003Csub\u003EPF\u0026nbsp;\u003C\/sub\u003E- это Power-Fail Voltage, его значение составляет 2.45В .. 2.70В. Переключение на V\u003Csub\u003ECC\u003C\/sub\u003E\u0026nbsp;происходит, когда напряжение на данном входе становится больше V\u003Csub\u003EBAT\u003C\/sub\u003E.\u003C\/p\u003E\u003Cp\u003EИз таблицы видно, что потребление DS3231 не превышает 300мкА при работающей шине I2C и V\u003Csub\u003ECC \u003C\/sub\u003E= 5.5В. В целом же потребление значительно ниже. Для его оценки я подключил модуль DS3231 к микроконтроллеру ATmega328P без обвязки. Тактирование от внутреннего генератора 8МГц. Питание - литиевый аккумулятор 18650 с напряжением 4.1В. В режиме POWER_DOWN с отключённым АЦП и BOD потребление микроконтроллера и часов составило 93мкА:\u003C\/p\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-B-Q6FuIeAKo\/X2YCSG3kRRI\/AAAAAAAABRA\/0JK90Eg6_6IXnGJFoQN-R2Zn_KyQWFdiACNcBGAsYHQ\/s1280\/DS3231_current.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"720\" data-original-width=\"1280\" height=\"360\" src=\"https:\/\/1.bp.blogspot.com\/-B-Q6FuIeAKo\/X2YCSG3kRRI\/AAAAAAAABRA\/0JK90Eg6_6IXnGJFoQN-R2Zn_KyQWFdiACNcBGAsYHQ\/w640-h360\/DS3231_current.jpg\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cp\u003EТаким образом, DS3231 - это не просто точные часы, это полезный инструмент для многих проектов, требующих минимизации энергопотребления.\u003C\/p\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/4318166082941340124\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/09\/ds3231.html#comment-form","title":"Комментарии: 12"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4318166082941340124"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4318166082941340124"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/09\/ds3231.html","title":"DS3231 - будильник для Ардуино"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-rZD89BKegH4\/X2Ye48kmM0I\/AAAAAAAABRM\/xG6aGxr69uIjAgRnxu0Y1RFBfjCNjq5AQCNcBGAsYHQ\/s72-w320-h280-c\/arduino_alarm.png","height":"72","width":"72"},"thr$total":{"$t":"12"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-7998652808377710845"},"published":{"$t":"2020-09-07T19:40:00.017+03:00"},"updated":{"$t":"2020-11-29T13:00:05.162+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"lcd"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энкодер вращения"}],"title":{"type":"text","$t":"LiquidCrystal_I2C_Menu - библиотека для создания меню на ЖК дисплее и Ардуино. Новые возможности"},"content":{"type":"html","$t":"\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-5fQl2ZwaFwQ\/X1dlNilTOSI\/AAAAAAAABPw\/fTG-ielgYIMVvhWUbCqtUiZJ_nUaPEDEQCNcBGAsYHQ\/s800\/LCI2C_Menu.jpg\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Меню на Ардуино\" border=\"0\" data-original-height=\"413\" data-original-width=\"800\" height=\"206\" src=\"https:\/\/1.bp.blogspot.com\/-5fQl2ZwaFwQ\/X1dlNilTOSI\/AAAAAAAABPw\/fTG-ielgYIMVvhWUbCqtUiZJ_nUaPEDEQCNcBGAsYHQ\/w400-h206\/LCI2C_Menu.jpg\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003EВ одной из прошлых публикаций я писал о своей библиотеке\u0026nbsp;LiquidCrystal_I2C_Ext для создания меню на текстовом LCD дисплее и энкодере вращения. Библиотека получилась довольно интересная. Только название, как выяснилось впоследствии, уже используется. Поэтому я принял решение переименовать её в LiquidCrystal_I2C_Menu. Кроме нового имени в ней появились и новые возможности. А недавно я сделал версию библиотеки для управления с помощью кнопок - LiquidCrystal_I2C_Menu_Btns. Итого на ваш выбор представлены две библиотеки, о которых пойдет речь в сегодняшней статье.\u003Cspan\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003C\/span\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EГде качать\u003C\/h2\u003E\u003Cdiv\u003EБиблиотеки находятся на github по ссылкам:\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/VladimirTsibrov\/LiquidCrystal_I2C_Menu\" target=\"_blank\"\u003Ehttps:\/\/github.com\/VladimirTsibrov\/LiquidCrystal_I2C_Menu\u003C\/a\u003E - управление энкодером\u003C\/div\u003E\u003Cdiv\u003E\u003Ca href=\"https:\/\/github.com\/VladimirTsibrov\/LiquidCrystal_I2C_Menu_Btns\" target=\"_blank\"\u003Ehttps:\/\/github.com\/VladimirTsibrov\/LiquidCrystal_I2C_Menu_Btns\u003C\/a\u003E\u0026nbsp;- управление кнопками\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЧтобы скачать интересующую библиотеку необходимо нажать на кнопку Code, затем Download ZIP:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-0Xy75AmaWEo\/X1Ya5NmHvWI\/AAAAAAAABOM\/wT-hxIYOGScgRgQvkVD7-jmr2I3I_XbSACNcBGAsYHQ\/s1216\/LQI2C_Menu_Download.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"753\" data-original-width=\"1216\" height=\"388\" src=\"https:\/\/1.bp.blogspot.com\/-0Xy75AmaWEo\/X1Ya5NmHvWI\/AAAAAAAABOM\/wT-hxIYOGScgRgQvkVD7-jmr2I3I_XbSACNcBGAsYHQ\/w625-h388\/LQI2C_Menu_Download.png\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EДля установки библиотеки в среду Arduino распакуйте содержимое архива в папку Arduino_dir\\libraries\\ и удалите из названия \"-master\".\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EКак подключать\u003C\/h2\u003E\u003Cdiv\u003EБиблиотеки предназначены для работы с дисплеями LCD2004 и LCD1602 с I2C интерфейсом. Для управления потребуются либо энкодер вращения с кнопкой, например, KY-040, либо 3-4 кнопки. Схемы их подключения к Ардуино приведены ниже:\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-nSFwvdJ21HY\/XyZt52BI01I\/AAAAAAAABNM\/Isrkk7uCAFwLmbsCPmj55Fig3MlpqN5fwCNcBGAsYHQ\/s1866\/LiquidCrystal_I2C_Menu%2Bwiring.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"1026\" data-original-width=\"1866\" height=\"352\" src=\"https:\/\/1.bp.blogspot.com\/-nSFwvdJ21HY\/XyZt52BI01I\/AAAAAAAABNM\/Isrkk7uCAFwLmbsCPmj55Fig3MlpqN5fwCNcBGAsYHQ\/w640-h352\/LiquidCrystal_I2C_Menu%2Bwiring.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EСхема подключения дисплея и энкодера к Ардуино для работы с LiquidCrystal_I2C_Menu\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-8c6guQwhCJ8\/XyZt_q-v32I\/AAAAAAAABNQ\/OQR5ztOfC4YYnppH_eVMj1RVDNs36cp2ACNcBGAsYHQ\/s1866\/LiquidCrystal_I2C_Menu_Btns%2Bwiring.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"1341\" data-original-width=\"1866\" height=\"460\" src=\"https:\/\/1.bp.blogspot.com\/-8c6guQwhCJ8\/XyZt_q-v32I\/AAAAAAAABNQ\/OQR5ztOfC4YYnppH_eVMj1RVDNs36cp2ACNcBGAsYHQ\/w640-h460\/LiquidCrystal_I2C_Menu_Btns%2Bwiring.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EСхема подключения дисплея и кнопок к Ардуино для работы с LiquidCrystal_I2C_Menu_Btns\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EВы можете выбрать для подключения любые другие пины Ардуино. Только не забудьте потом прописать их в скетче, чтобы библиотека знала, с какими выводами ей работать.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: center;\"\u003EДля библиотеки LiquidCrystal_I2C_Menu_Btns достаточно трёх кнопок. Четвертая опциональная, используется для отмены действий и возврата из функций.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003E\u003Cspan style=\"text-align: center;\"\u003EКак использовать\u003C\/span\u003E\u003C\/h2\u003E\u003Cdiv style=\"text-align: left;\"\u003EОбе библиотеки одинаковы в использовании, за исключением функций подключения и опроса элементов управления (attachEncoder \/ attachButtons и getEncoderState \/ getButtonsState). В остальном они взаимозаменяемы. Помимо унаследованных из\u0026nbsp;\u003Cspan style=\"text-align: center;\"\u003ELiquidCrystal_I2C функций в\u003C\/span\u003E\u0026nbsp;них реализованы следующие:\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003EprintAt(x, y, text)\u003C\/b\u003E\u0026nbsp;– вывод текста на дисплей с указанной позиции.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003Eprintf(format, …)\u003C\/b\u003E\u0026nbsp;– форматированный вывод текста. Лично мне очень не хватало этой функции. Если раньше приходилось делать несколько вызовов print, или выводить текст в промежуточный буфер функцией sprintf, то сейчас достаточно одного вызова printf.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EprintfAt(x, y, format, …)\u003C\/b\u003E\u0026nbsp;– форматированный вывод с указанной позиции.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EattachEncoder(pinA, pinB, pinBtn)\u003C\/b\u003E\u0026nbsp;– сообщает библиотеке, к каким выводам Ардуино подключен энкодер. Только для LiquidCrystal_I2C_Menu.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EgetEncoderState()\u003C\/b\u003E\u0026nbsp;– опрос состояния энкодера. Возвращает значение типа eEncoderState (перечисляемый тип, описан в библиотеке как {eNone, eLeft, eRight, eButton}). Только для LiquidCrystal_I2C_Menu.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EattachButtons(pinLeft, pinRight, pinEnter, [pinBack])\u003C\/b\u003E\u0026nbsp;– сообщает библиотеке, к каким выводам Ардуино подключены кнопки. Только для LiquidCrystal_I2C_Menu_Btns.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EgetButtonsState()\u0026nbsp;\u003C\/b\u003E– опрос состояния кнопок. Возвращает значение типа eButtonsState (перечисляемый тип, описан в библиотеке как {eNone, eLeft, eRight, eButton, eBack}). Только для LiquidCrystal_I2C_Menu_Btns.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EprintMultiline(text)\u003C\/b\u003E\u0026nbsp;– вывод длинного текста с возможностью вертикальной прокрутки. Возврат из функции осуществляется при нажатии кнопки.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputVal(title, min, max, default, [step = 1], [*onChangeFunc = NULL])\u003C\/b\u003E\u0026nbsp;– ввод числового значения. title – заголовок; параметры min и max задают диапазон, в котором может изменяться значение; default – начальное значение; step –\u0026nbsp;величина приращения, по умолчанию равна 1; необязательный параметр onChangeFunc –\u0026nbsp;указатель на функцию, которая должна вызываться при изменении значения.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputValAt(x, y, min, max, default, [step = 1]\u003Cb\u003E,\u0026nbsp;[*onChangeFunc = NULL]\u003C\/b\u003E)\u003C\/b\u003E\u0026nbsp;– аналогична функции inputVal, но в отличие от нее не очищает дисплей при вызове и ввод значения осуществляется с указанной позиции.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputValBitwise(title, value, precision, [scale = 0], [signed = false])\u003C\/b\u003E\u0026nbsp;– позволяет вводить числовые значения путем редактирования отдельных разрядов числа. Параметр title определяет заголовок; value – ссылка на переменную, в которую будет помещен результат ввода; precision – общее количество разрядов в числе; scale –\u0026nbsp;количество разрядов после запятой, значение по умолчанию 0; signed –\u0026nbsp;разрешает (при значении true) или запрещает (при значении false –\u0026nbsp;по умолчанию) ввод отрицательных чисел. Функция возвращает true, если пользователь подтвердил ввод, false, если отказался.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EinputStrVal(title, buffer, length, available_symbols)\u003C\/b\u003E\u0026nbsp;– аналогично функции inputValBitwise предоставляет возможность поразрядного ввода, но кроме цифр могут быть введены и другие символы. Параметр title определяет заголовок; buffer – ссылка на символьный буфер, в который будет помещен результат ввода; length – количество вводимых символов; параметр available_symbols –\u0026nbsp;это строка символов, доступных для ввода. Функция возвращает true, если пользователь подтвердил ввод, false, если отказался.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EselectVal(title, list_of_values, count, [show_selected = true]\u003Cb\u003E, [selected_index = 0]\u003C\/b\u003E)\u003C\/b\u003E\u0026nbsp;– позволяет выбрать значение из списка list и возвращает индекс выбранного элемента.\u0026nbsp; title – отображаемый на дисплее заголовок; list – список значений для выбора, представляет собой массив значений типа char*, String или int; count – количество элементов в массиве;\u0026nbsp;show_selected - флаг отображения метки на выбранном элементе; selected_index – индекс выбранного по умолчанию элемента.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EshowMenu(menu, menu_length, show_title)\u003C\/b\u003E\u0026nbsp;– отображает меню и возвращает ключ выбранного элемента. menu – массив элементов типа sMenuItem; menu_length – длина меню; show_title – признак необходимости отображения заголовка.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EgetSelectedMenuItem()\u003C\/b\u003E\u0026nbsp;–\u0026nbsp;возвращает ключ выбранного пункта меню для использования внутри обработчиков.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EattachIdleFunc(*IdleFunc)\u003C\/b\u003E\u0026nbsp;–\u0026nbsp;позволяет привязать функцию, которая будет вызываться библиотекой при бездействии.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp;Разберём несколько примеров их использования.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Ch3 style=\"text-align: left;\"\u003EprintAt, printf, printfAt\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E hello[] = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Hello, world!\"\u003C\/span\u003E;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003EString\u003C\/span\u003E s = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"String example\"\u003C\/span\u003E;\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"millis=%lu\"\u003C\/span\u003E, \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Emillis\u003C\/span\u003E());\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E, hello);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E, s);\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E3\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"%s\"\u003C\/span\u003E, s.c_str());\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/h3\u003E\u003Cdiv\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-GURAzvTDiEs\/X1ctY_NNwrI\/AAAAAAAABOk\/r8OZ5S0kA78NGPhtE8TTxViT3CVAsancwCNcBGAsYHQ\/s1024\/printf_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-GURAzvTDiEs\/X1ctY_NNwrI\/AAAAAAAABOk\/r8OZ5S0kA78NGPhtE8TTxViT3CVAsancwCNcBGAsYHQ\/w625-h338\/printf_example.jpg\" title=\"Функции printf, printfAt библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EРезультат работы функций\u0026nbsp;printAt, printf, printfAt\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cspan style=\"font-weight: normal;\"\u003EФункция printAt поддерживает те же типы данных, что и print: вы можете выводить на дисплей целые и дробные числа, текстовые строки, будь то массив символов или переменная типа String. А при работе с функциями форматированного вывода printf и printfAt не забывайте, что они не поддерживают тип String и передавать им нужно указатель на строку в стиле Си. Для этого достаточно вызвать функцию c_str() класса String, в примере выше это показано.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cb\u003EattachEncoder, getEncoderState и\u0026nbsp;\u003C\/b\u003E\u003Cb\u003EattachButtons,\u0026nbsp;\u003C\/b\u003E\u003Cb\u003EgetButtonsState\u003C\/b\u003E\u003C\/h3\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eint\u003C\/span\u003E x = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"%d \"\u003C\/span\u003E, x);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Опрашиваем энкодер\u003C\/span\u003E\u003Cbr \/\u003E  eEncoderState EncoderState = lcd.getEncoderState();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eswitch\u003C\/span\u003E (EncoderState) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ecase\u003C\/span\u003E eLeft:   \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ При вращении влево уменьшаем значение переменной\u003C\/span\u003E\u003Cbr \/\u003E      x--;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ecase\u003C\/span\u003E eRight:  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ При вращении вправо увеличиваем значение переменной\u003C\/span\u003E\u003Cbr \/\u003E      x++;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ecase\u003C\/span\u003E eButton: \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ При нажатии кнопки энкодера обнуляем значение переменной\u003C\/span\u003E\u003Cbr \/\u003E      x = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebreak\u003C\/span\u003E;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ecase\u003C\/span\u003E eNone:   \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Энкодер не вращается, кнопка не нажата. Выходим из функции\u003C\/span\u003E\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ereturn\u003C\/span\u003E;\u003Cbr \/\u003E  }\u003Cbr \/\u003E  lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"%d \"\u003C\/span\u003E, x); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Покажем новое значение x\u003C\/span\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EВ данном примере выполняется подключение энкодера функцией attachEncoder и опрос его состояния в цикле. При вращении энкодера изменяется значение переменной x, затем выводится на дисплей. Нажатие на кнопку приводит к обнулению переменной.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EАналогичный пример для библиотеки LiquidCrystal_I2C_Menu_Btns вы найдете в папке \\examples\\Buttons. Отличие состоит в использовании функций attachButtons и getButtonsState. Последняя возвращает значение типа eButtonsState, которое определено в библиотеке следующим образом:\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eenum\u003C\/span\u003E eButtonsState {eNone, eLeft, eRight, eButton, eBack};\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003EЭто те же значения, что используются при работе с энкодером, плюс новое значение eBack для кнопки \"Назад\". Подключать эту кнопку необязательно, то есть функция attachButtons может быть вызвана с тремя параметрами:\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003Elcd.attachButtons(pinLeft, pinRight, pinEnter);\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cb\u003E\u003Cbr \/\u003E\u003C\/b\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cb\u003EprintMultiline\u003C\/b\u003E\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;avr\/pgmspace.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Объявим две строки в памяти программ. Так они не будут занимать оперативную память\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E text_1[] PROGMEM = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Using PROGMEM example\"\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E text_2[] PROGMEM = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"This text is stored in FLASH\"\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E* \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Econst\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Etext\u003C\/span\u003E[] PROGMEM = {text_1, text_2};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E    lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E *\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Вывод на экран длинной строки. Строка занимает оперативную память.\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Вывод строки из памяти программ.\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E = (\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E*) malloc(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E30\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Буфер для временного хранения строки\u003C\/span\u003E\u003Cbr \/\u003E  strcpy_P(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E, (\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E*)pgm_read_word(\u0026amp;(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Etext\u003C\/span\u003E[\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E]))); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Копируем строку в буфер\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Выводим содержимое буфера на экран\u003C\/span\u003E\u003Cbr \/\u003E  strcpy_P(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E, (\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E*)pgm_read_word(\u0026amp;(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Etext\u003C\/span\u003E[\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E]))); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Аналогично со второй строкой\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E);\u003Cbr \/\u003E  free(\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebuffer\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Освобождаем буфер\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Другой пример хранения строк в памяти программ - использование макроса F().\u003C\/span\u003E\u003Cbr \/\u003E  lcd.printMultiline(F(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Using F() macro example. Press button to continue.\"\u003C\/span\u003E));\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-Io20BjSx8bw\/X1cto4A67pI\/AAAAAAAABOs\/-jf0m6mLiE8V8COWAQ-ZOhX1dD1tu1JLQCNcBGAsYHQ\/s1024\/printMultiline_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-Io20BjSx8bw\/X1cto4A67pI\/AAAAAAAABOs\/-jf0m6mLiE8V8COWAQ-ZOhX1dD1tu1JLQCNcBGAsYHQ\/w625-h338\/printMultiline_example.jpg\" title=\"Функция printMultiline библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EРезультат работы функции printMultiline\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EФункция printMultiline позволяет выводить на дисплей длинные строки с возможностью прокрутки. Но, объявив несколько таких строк в своем скетче, при компиляции вы можете заметить, как быстро они \"съедают\" память данных. В\u0026nbsp;Ардуино Уно для хранения данных доступно всего 2кб, тогда как для кода программы отведено 32кб. Поэтому при наличии в программе большого объема текстовых данных целесообразно хранить их в памяти программ (FLASH). Для этого используется ключевое слово PROGMEM.\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EPROGMEM – это модификатор переменных, он сообщает компилятору, что указанная переменная должна быть размещена не в памяти данных, а в памяти программ. Работает этот модификатор только с типами данных, объявленными в файле pgmspace.h, частью которой он является. Чтобы впоследствии процессор мог что-то сделать с этими данными, они должны быть скопированы из FLASH в SRAM. Для этого в примере выше выделяется буфер, в который происходит считывание строк text[0] и text[1]. После того как данные выведены на дисплей буфер может быть освобожден.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЕще один вариант размещения строки в памяти программ – это использование макроса F() непосредственно в функции printMultiline. В примере это также показано.\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EinputVal, inputValAt\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Для примера запросим длину массива\u003C\/span\u003E\u003Cbr \/\u003E  uint8_t len = lcd.inputVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input array len\"\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E10\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E8\u003C\/span\u003E);\u003Cbr \/\u003E  uint8_t A[len];\u003Cbr \/\u003E  uint8_t t;\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Затем элементы массива\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E; i \u0026lt; len; i++) {\u003Cbr \/\u003E    lcd.printfAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input A[%d]: \"\u003C\/span\u003E, i); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Приглашение для ввода\u003C\/span\u003E\u003Cbr \/\u003E    A[i] = lcd.inputValAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E12\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E9\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E);  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Ввод значения\u003C\/span\u003E\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Отсортируем массив\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E; i \u0026lt; len - \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E; i++) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t j = i + \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E; j \u0026lt; len; j++) {\u003Cbr \/\u003E      \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E(A[i] \u0026gt; A[j]){\u003Cbr \/\u003E        t = A[i];\u003Cbr \/\u003E        A[i] = A[j];\u003Cbr \/\u003E        A[j] = t;\u003Cbr \/\u003E      }\u003Cbr \/\u003E    }\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ И выведем на дисплей\u003C\/span\u003E\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eclear\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Sorted array:\"\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EsetCursor\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Efor\u003C\/span\u003E (uint8_t i = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E; i \u0026lt; len; i++)\u003Cbr \/\u003E    lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"%d \"\u003C\/span\u003E, A[i]);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Ожидаем нажатия кнопки для продолжения\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() == eNone);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-lnZHCtR84Cw\/X1cuCsZ6VAI\/AAAAAAAABO0\/ASdu77IyTGojZgQM0BaGXR9G6lNL0NXMQCNcBGAsYHQ\/s1024\/inputValAt_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-lnZHCtR84Cw\/X1cuCsZ6VAI\/AAAAAAAABO0\/ASdu77IyTGojZgQM0BaGXR9G6lNL0NXMQCNcBGAsYHQ\/w625-h338\/inputValAt_example.jpg\" title=\"Функции inputVal и inputValAt библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EИспользование функций printfAt и inputValAt для ввода значений\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EДля демонстрации использования функций inputVal и inputValAt в данном примере предлагается ввести длину массива, а затем элементы массива. Введенный массив сортируется и выводится на дисплей. Отличие этих двух функций состоит в том, что inputValAt при вызове не очищает дисплей и позволяет предварительно вывести на дисплей заголовок, используя printf. В скетче выше это используется для отображения индекса вводимого элемента массива.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EВ некоторых случаях необходимо знать значение переменной в процессе её редактирования, а не по завершении редактирования. Это позволило бы оперативно применять новое значение. Тогда, например, при изменении громкости мы сможем не только видеть её новое значение на дисплее, но и воспринимать изменение на слух. Для таких случаев в функциях inputVal и inputValAt предусмотрен параметр onChangeFunc. В нём передаётся указатель на функцию, которая должна вызываться при каждом изменении редактируемого параметра. Внутри такой функции можно применить новое значение параметра или даже визуализировать его ввод: отобразить шкалу как в примере ниже.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-F4srbCBwqeI\/X8Nf3RFpdhI\/AAAAAAAABU0\/YMH_maBOjEgMoy06Fjoct5XpOmCfkOZsQCNcBGAsYHQ\/s800\/inputVal_onChange.gif\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"434\" data-original-width=\"800\" height=\"347\" src=\"https:\/\/1.bp.blogspot.com\/-F4srbCBwqeI\/X8Nf3RFpdhI\/AAAAAAAABU0\/YMH_maBOjEgMoy06Fjoct5XpOmCfkOZsQCNcBGAsYHQ\/w640-h347\/inputVal_onChange.gif\" title=\"Визуализация ввода для функций inputVal и inputValAt библиотеки LiquidCrystal_I2C_Menu\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EШкала ввода для функций inputVal и inputValAt\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003EВ примерах к библиотеке есть скетч\u0026nbsp;inputVal_onChange, поясняющий использование параметра onChangeFunc.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EinputValBitwise\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Edouble\u003C\/span\u003E val = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Ввод 5-значного числа со знаком, 2 цифры после запятой:\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (lcd.inputValBitwise(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input value\"\u003C\/span\u003E, val, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2\u003C\/span\u003E, true)) {\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"You entered: \"\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(val);\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input canceled\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() == eNone);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-8iQKszZh4ig\/X1cumkwY7UI\/AAAAAAAABO8\/vgAI_-lbHVQd-JuwCrnNM8gV75diC5snACNcBGAsYHQ\/s1024\/inputValBitwise_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-8iQKszZh4ig\/X1cumkwY7UI\/AAAAAAAABO8\/vgAI_-lbHVQd-JuwCrnNM8gV75diC5snACNcBGAsYHQ\/w625-h338\/inputValBitwise_example.jpg\" title=\"Функция поразрядного ввода inputValBitwise библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример использования функции\u0026nbsp;inputValBitwise для поразрядного ввода чисел\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Cp\u003EПараметры, с которыми вызывается функция inputValBitwise в данном скетче, определяют ввод пятиразрядного числа со знаком, два младших разряда отведены для дробной части. При подтверждении ввода функция возвращает true и помещает введённое значение в переменную val.\u003C\/p\u003E\u003Cp\u003EЕщё несколько примеров ввода чисел функциями inputVal и inputValBitwise вы найдёте в скетче Input_double_and_long.\u003C\/p\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EinputStrVal\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E ip[] = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"192.168.001.001\"\u003C\/span\u003E; \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Массив символов с начальным значением\/маской\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (lcd.inputStrVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input IP\"\u003C\/span\u003E, ip, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E15\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"0123456789\"\u003C\/span\u003E)){\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"You entered:\"\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E, ip);\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input canceled\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() == eNone);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-F-Jgo04Sf38\/X1cvHK7kWwI\/AAAAAAAABPE\/uHma76GiajgUOiEp0fJ0XdE1BmLi3JrvACNcBGAsYHQ\/s1024\/inputStrVal.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-F-Jgo04Sf38\/X1cvHK7kWwI\/AAAAAAAABPE\/uHma76GiajgUOiEp0fJ0XdE1BmLi3JrvACNcBGAsYHQ\/w625-h338\/inputStrVal.jpg\" title=\"Функция inputStrVal библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример использования функции inputStrVal для маскированного ввода\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EЗдесь функция inputStrVal используется для ввода IP адреса. При вызове функции содержимое переданного буфера рассматривается как значение по умолчанию и выводится на дисплей. Последний параметр функции определяет разрешенные для ввода символы, в данном случае только цифры. Если буфер содержит символы, которые не могут быть введены, то их не удастся изменить. Таким способом можно реализовать маскированный ввод или, например, показать единицу измерения для вводимого значения.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EselectVal\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eint\u003C\/span\u003E index = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E  \u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003EString\u003C\/span\u003E list[] = {\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Europa+\"\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Record\"\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"DFM\"\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Retro FM\"\u003C\/span\u003E, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Energy\"\u003C\/span\u003E};\u003Cbr \/\u003E  index = lcd.selectVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Select station\"\u003C\/span\u003E, list, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E, true, index);\u003Cbr \/\u003E  lcd.printf(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"%s selected\"\u003C\/span\u003E, list[index].c_str());\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ewhile\u003C\/span\u003E (lcd.getEncoderState() == eNone);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-Wku5wSRDY3c\/X1cvjBG9I1I\/AAAAAAAABPM\/dEdKRXtzdP0LooDfwaTmde8Rew-aI4ABgCNcBGAsYHQ\/s1024\/selectVal_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-Wku5wSRDY3c\/X1cvjBG9I1I\/AAAAAAAABPM\/dEdKRXtzdP0LooDfwaTmde8Rew-aI4ABgCNcBGAsYHQ\/w625-h338\/selectVal_example.jpg\" title=\"Функция выбора значения selectVal библиотеки LiquidCrystal_I2C_Menu\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример работы функции selectVal\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EФункция selectVal используется для выбора значения из списка. Она работает с массивами значений типа char*, String или int и возвращает индекс выбранного элемента. Последние два параметра функции необязательны, это show_selected - определяет, должно ли визуально выделяться выбранное значение (по умолчанию true) и\u0026nbsp; preselected - задаёт индекс выбранного элемента (по умолчанию -1 - ничего не выбрано).\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cb\u003EshowMenu\u003C\/b\u003E\u003C\/h3\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Объявим перечисление, используемое в качестве ключа пунктов меню\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eenum\u003C\/span\u003E {mkBack, mkRoot, mkRun, mkOptions, mkMode, mkSpeed, mkLog, mkSelftest, mkHelp, mkFAQ, mkIndex, mkAbout};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Описание меню\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ структура пункта меню: {ParentKey, Key, Caption, [Handler]}\u003C\/span\u003E\u003Cbr \/\u003EsMenuItem menu[] = {\u003Cbr \/\u003E  {mkBack, mkRoot, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Menu demo\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkRun, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Run\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkOptions, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Options\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkMode, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Mode\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkSpeed, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Speed\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkLog, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Print log\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkSelftest, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Selftest\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkOptions, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Back\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkHelp, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Help\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkFAQ, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"FAQ\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkIndex, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Index\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkAbout, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"About\"\u003C\/span\u003E},\u003Cbr \/\u003E      {mkHelp, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Back\"\u003C\/span\u003E},\u003Cbr \/\u003E    {mkRoot, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Exit menu\"\u003C\/span\u003E}\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003Euint8_t menuLen = \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Esizeof\u003C\/span\u003E(menu) \/ \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Esizeof\u003C\/span\u003E(sMenuItem);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Показываем меню\u003C\/span\u003E\u003Cbr \/\u003E  uint8_t selectedMenuItem = lcd.showMenu(menu, menuLen, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ И выполняем действия в соответствии с выбранным пунктом\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkRun)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Run selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkMode)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Mode selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkSpeed)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Speed selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkLog)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Print log selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkSelftest)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Selftest selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkFAQ)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"FAQ selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkIndex)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Index selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkAbout)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"About selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eelse\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (selectedMenuItem == mkBack)\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Exit selected\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E2000\u003C\/span\u003E);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cp\u003E\u003Cbr \/\u003E\u003C\/p\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-u4zw1qO9Vis\/X1cv8mkVauI\/AAAAAAAABPY\/WrexiCPfIrYnPjpZgbfMIBh2YsbP5onDwCNcBGAsYHQ\/s1024\/showMenu_example.jpg\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"555\" data-original-width=\"1024\" height=\"338\" src=\"https:\/\/1.bp.blogspot.com\/-u4zw1qO9Vis\/X1cv8mkVauI\/AAAAAAAABPY\/WrexiCPfIrYnPjpZgbfMIBh2YsbP5onDwCNcBGAsYHQ\/w625-h338\/showMenu_example.jpg\" title=\"Меню на Ардуино и LCD дисплее\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример меню, построенного функцией showMenu\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cp\u003EФункция showMenu берёт на себя отрисовку меню и навигацию по нему. Входными параметрами функции являются массив элементов типа sMenuItem (это и есть наше меню), длина массива и признак отображения заголовка в меню. В качестве заголовка используется название родительского пункта меню. Отключение отображения заголовка полезно при использовании дисплея 1602.\u003C\/p\u003E\u003Cp\u003EИтак, меню - это массив элементов sMenuItem. Данная структура определёна в библиотеке следующим образом:\u003C\/p\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Estruct\u003C\/span\u003E sMenuItem {\u003Cbr \/\u003E  uint8_t parent;\u003Cbr \/\u003E  uint8_t key;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E    *caption;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E    (*handler)();\u003Cbr \/\u003E};\u003C\/pre\u003E\u003Cp\u003E\u003C\/p\u003E\u003Cp\u003EПараметры parent и key служат для задания иерархии, caption – указатель на название элемента меню, handler - указатель на функцию, которая будет вызываться при выборе данного пункта меню. Будем называть такие функции обработчиками.\u003C\/p\u003E\u003Cp\u003EВ качестве parent и key могут быть использованы целочисленные значения, начиная с 1. Но гораздо удобнее определить для них символьные имена, то есть работать с перечислением. Обратите внимание на то, что первым в перечислении должно быть определено значение mkBack, ему соответствует значение 0. Данное значение является служебным и используется для пунктов меню, отвечающих за возврат на уровень выше.\u003C\/p\u003E\u003Cp\u003EПри выборе пункта меню, не имеющего подменю и обработчика, функция возвращает соответствующее ему значение key. После этого остаётся проанализировать вернувшееся значение при помощи if или case и выполнить соответствующее выбранному элементу действие.\u003C\/p\u003E\u003Cp\u003EЕсли же для выбранного пункта меню задан обработчик, то он будет вызван, после чего управление вернётся в меню.\u003C\/p\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EgetSelectedMenuItem и использование обработчиков меню\u003C\/h3\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eint\u003C\/span\u003E brightness = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E50\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eint\u003C\/span\u003E _delay = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E10\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Обработчики пунктов меню SetBrightness и SetDelay\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Используются для ввода значений brightness и _delay\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E SetBrightness() {\u003Cbr \/\u003E  brightness = lcd.inputVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input brightness(%)\"\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E100\u003C\/span\u003E, brightness, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E5\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E SetDelay() {\u003Cbr \/\u003E  _delay = lcd.inputVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input delay(ms)\"\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, _delay);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Объявим перечисление, используемое в качестве ключа пунктов меню\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eenum\u003C\/span\u003E {mkBack, mkRoot, mkOptions, mkSetBrightness, mkSetDelay};\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Описание меню\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ структура пункта меню: {ParentKey, Key, Caption, [Handler]}\u003C\/span\u003E\u003Cbr \/\u003EsMenuItem menu[] = {\u003Cbr \/\u003E  {mkBack, mkRoot, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Main menu\"\u003C\/span\u003E, NULL},\u003Cbr \/\u003E  {mkRoot, mkOptions, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Options\"\u003C\/span\u003E, NULL},\u003Cbr \/\u003E  {mkOptions, mkSetBrightness, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"SetBrightness\"\u003C\/span\u003E, SetBrightness},\u003Cbr \/\u003E  {mkOptions, mkSetDelay, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"SetDelay\"\u003C\/span\u003E, SetDelay},\u003Cbr \/\u003E  {mkOptions, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Back\"\u003C\/span\u003E, NULL},\u003Cbr \/\u003E  {mkRoot, mkBack, \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Back\"\u003C\/span\u003E, NULL}\u003Cbr \/\u003E};\u003Cbr \/\u003E\u003Cbr \/\u003Euint8_t menuLen = \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Esizeof\u003C\/span\u003E(menu) \/ \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Esizeof\u003C\/span\u003E(sMenuItem);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  uint8_t selectedMenuItem = lcd.showMenu(menu, menuLen, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Вызываем меню\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/* Реакция на выбор пунктов меню SetBrightness и SetDelay реализована\u003Cbr \/\u003E   * в функциях-обработчиках.\u003Cbr \/\u003E   * При необходимости здесь может располагаться анализ значения selectedMenuItem \u003Cbr \/\u003E   * для пунктов, не имеющих обработчиков:\u003Cbr \/\u003E     if (selectedMenuItem == ...) {...}\u003Cbr \/\u003E  *\/\u003C\/span\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003EВ этом примере для двух пунктов меню заданы функции-обработчики SetBrightness и SetDelay. Они не имеют параметров и ничего не возвращают - это обязательное требование к обработчикам. Обработчики вызываются прямо из функции showMenu, то есть она не завершается и не возвращает ключ выбранного пункта меню. Внутри обработчиков можно как угодно работать с дисплеем, перерисовывать его и вызывать функции библиотеки, после завершения обработчика меню будет восстановлено.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EОдин обработчик можно привязать сразу к нескольким пунктам меню. В этом случае, чтобы понять, какой пункт был выбран, используется функция getSelectedMenuItem. Она возвращает ключ выбранного пункта. Далее ключ нужно проанализировать и выполнить соответствующий код.\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EattachIdleFunc\u003C\/h3\u003E\u003Cdiv\u003E\u003Cdiv\u003EПри вызове большинства функций библиотеки ожидается действие от пользователя: выбор пункта в меню, ввод значения и так далее. При этом мы по сути находимся в цикле и выполнение остальной части программы невозможно, пока мы не выйдем из этого цикла. Это логично. Но возможны случаи, когда такая логика работы не подходит. Например, если нам нужно опрашивать какие-либо датчики даже во время работы меню. В таких случаях поможет функция attachIdleFunc. Она позволяет указать функцию, которую будет вызывать библиотека снова и снова, пока мы находимся в меню, вводим или выбираем значения. А уже внутри этой самой функции можно сделать опрос датчиков или что угодно, что не будет долго выполняться, чтобы не мешать библиотеке опрашивать кнопки и энкодер.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EДля демонстрации описанного функционала в приведённом ниже примере включается и выключается встроенный светодиод Ардуино, пока мы находимся внутри функций inputVal и printMultiline.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Пины, к которым подключен энкодер\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinCLK 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinDT  3\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E pinSW  4\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eunsigned\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Elong\u003C\/span\u003E tm = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Ebool\u003C\/span\u003E ledState = false;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Данная функция будет вызываться из библиотеки при бездействии\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E myIdleFunc() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Emillis\u003C\/span\u003E() - tm \u0026gt;= \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E500\u003C\/span\u003E) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Включаем и выключаем встроенный светодиод на Ардуино\u003C\/span\u003E\u003Cbr \/\u003E    tm = \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Emillis\u003C\/span\u003E();\u003Cbr \/\u003E    ledState = !ledState;\u003Cbr \/\u003E    \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EdigitalWrite\u003C\/span\u003E(\u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELED_BUILTIN\u003C\/span\u003E, ledState);\u003Cbr \/\u003E  }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  lcd.attachEncoder(pinDT, pinCLK, pinSW);\u003Cbr \/\u003E  lcd.attachIdleFunc(myIdleFunc);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003EpinMode\u003C\/span\u003E(\u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003ELED_BUILTIN\u003C\/span\u003E, \u003Cspan class=\"hljs-literal\" style=\"color: #d35400;\"\u003EOUTPUT\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Press the button\"\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Eint\u003C\/span\u003E x = \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  myIdleFunc();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eif\u003C\/span\u003E (lcd.getEncoderState() == eButton) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Для проверки вызовем любую функцию библиотеки,\u003C\/span\u003E\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ которая ожидает действий от пользователя:\u003C\/span\u003E\u003Cbr \/\u003E    x = lcd.inputVal(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Input some val\"\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E100\u003C\/span\u003E, x);\u003Cbr \/\u003E    lcd.printMultiline(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Some text here\"\u003C\/span\u003E);\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eclear\u003C\/span\u003E();\u003Cbr \/\u003E    lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Press the button\"\u003C\/span\u003E);\u003Cbr \/\u003E  }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EИзначально myIdleFunc вызывается внутри функции loop, в результате светодиод мигает. При нажатии на кнопку энкодера происходит вызов функций библиотеки, выполнение loop приостанавливается. Тем не менее светодиод продолжает мигать, поскольку myIdleFunc вызывается библиотекой. И работе функций inputVal и printMultiline это не мешает.\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EИзменение названий пунктов меню\u003C\/h2\u003E\u003Cdiv\u003EЕщё один приём, который я хочу показать, это изменение названий пунктов меню в ходе работы программы. Может пригодиться для отображения значений переменных в пунктах меню. В библиотеках есть примеры таких скетчей: Updating_menu_captions и Menu_for_setting_params.\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-uUaQSLEEjU8\/X1cy_Ic-g6I\/AAAAAAAABPk\/xq0ZY2OQB0okzlSPn7xLy3gmNYF8Kl76gCNcBGAsYHQ\/s800\/Updating_menu_captions.gif\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"434\" data-original-width=\"800\" height=\"341\" src=\"https:\/\/1.bp.blogspot.com\/-uUaQSLEEjU8\/X1cy_Ic-g6I\/AAAAAAAABPk\/xq0ZY2OQB0okzlSPn7xLy3gmNYF8Kl76gCNcBGAsYHQ\/w625-h341\/Updating_menu_captions.gif\" title=\"Отображение значений в пунктах меню\" width=\"625\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПример изменения названий пунктов меню\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EПоддержка дисплеев с кириллицей\u003C\/h2\u003E\u003Cdiv\u003EЕсли ваш дисплей поддерживает кириллицу, то для корректного отображения русского текста необходимо включить её поддержку в самой библиотеке. Для этого в заголовочном файле (LiquidCrystal_I2C_Menu.h или LiquidCrystal_I2C_Menu_Btns.h) найдите и раскомментируйте строку:\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E CYRILLIC_DISPLAY\u003C\/span\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003EПосле этого сохраните внесённые изменения. Теперь русские буквы могут быть использованы в меню и других функциях библиотеки. Не забывайте, что для хранения одной русской буквы используется два байта, а не один. Поэтому для строки из N русских букв следует выделять N * 2 + 1 байт памяти.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EКроме того, при включении поддержки кириллицы вам станут доступны следующие функции:\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003Euint8_t strlenUTF8(\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E *s)\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E substrUTF8(\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E* source, \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E* dest, uint8_t fromPos, uint8_t count)\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EФункция strlenUTF8 возвращает длину строки s в символах (а не байтах, в отличие от функции strlen). Функция substrUTF8 копирует подстроку из строки source, начиная с символа fromPos, длиной count символов (опять же символов, а не байтов) в строку dest. Эти функции не являются методами классов LiquidCrystal_I2C_Menu \/ LiquidCrystal_I2C_Menu_Btns и вызываются \"напрямую\", без указания имени экземпляра класса, например:\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em; text-align: left;\"\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;LiquidCrystal_I2C_Menu.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003ELiquidCrystal_I2C_Menu lcd(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0x27\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E20\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E4\u003C\/span\u003E);\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E myText[] = \u003Cspan class=\"hljs-string\" style=\"color: #005c5f;\"\u003E\"Привет, мир!\"\u003C\/span\u003E;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Echar\u003C\/span\u003E mySubstr[\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E21\u003C\/span\u003E];\u003Cbr \/\u003E  lcd.\u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eprint\u003C\/span\u003E(strlenUTF8(myText)); \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Напечатает \"12\"\u003C\/span\u003E\u003Cbr \/\u003E  substrUTF8(myText, mySubstr, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E8\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E3\u003C\/span\u003E);\u003Cbr \/\u003E  lcd.printAt(\u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E0\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: #8a7b52;\"\u003E1\u003C\/span\u003E, mySubstr);   \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Напечатает \"мир\"\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: #00979d;\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: #d35400;\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cbr \/\u003E}\u003C\/pre\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EДругие параметры\u003C\/h2\u003E\u003Cdiv\u003EКроме упомянутого выше CYRILLIC_DISPLAY заголовочные файлы библиотек содержат и другие параметры, которые могут быть изменены. Рассмотрим их.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E SCROLL_LONG_CAPTIONS\u003C\/span\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E- Данный параметр включает прокрутку длинных пунктов меню. Если такая возможность не нужна, просто закомментируйте данную строку. Это позволит немного уменьшить размер скомпилированного кода. Если же прокрутка нужна, то обратите внимание на временные интервалы данной функции:\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E SCROLL_DELAY        800  \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Задержка прокрутки\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E DELAY_BEFORE_SCROLL 4000 \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Задержка перед началом прокрутки\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E DELAY_AFTER_SCROLL  2000 \u003Cspan class=\"hljs-comment\" color=\"\"\u003E\/\/ Задержка после вывода всей строки\u003C\/span\u003E\u003C\/span\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E- Они определяют скорость прокрутки и задержки перед её началом и в конце.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E ENCODER_POOL_DELAY 5\u003C\/span\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E- Интервал опроса энкодера (только для библиотеки LiquidCrystal_I2C_Menu). Я всегда использую 5мс. Может быть кому-то понадобится установить другое значение\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255, 255, 255); color: #434f54; display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E BUTTONS_POOL_DELAY 50\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: #434f54;\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: #728e00;\"\u003Edefine\u003C\/span\u003E BUTTONS_HOLD_BEFORE_REPEAT 1000\u003C\/span\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E- Определяют интервал опроса кнопок и задержку при удержании кнопки нажатой (только для библиотеки LiquidCrystal_I2C_Menu_Btns). По истечении интервала BUTTONS_HOLD_BEFORE_REPEAT нажатая кнопка будет читаться как повторно нажатая каждые\u0026nbsp;BUTTONS_POOL_DELAY мс до тех пор, пока она не будет отпущена.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EВместо заключения\u003C\/h2\u003E\u003Cdiv\u003EПри создании данных библиотек была проделана большая работа. Поэтому, надеюсь, вы оцените результат. Если возникнут вопросы по их использованию - пишите в комментариях, постараюсь на них ответить.\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/7998652808377710845\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/09\/LiquidCrystal-I2C-Menu.html#comment-form","title":"Комментарии: 100"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/7998652808377710845"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/7998652808377710845"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/09\/LiquidCrystal-I2C-Menu.html","title":"LiquidCrystal_I2C_Menu - библиотека для создания меню на ЖК дисплее и Ардуино. Новые возможности"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-5fQl2ZwaFwQ\/X1dlNilTOSI\/AAAAAAAABPw\/fTG-ielgYIMVvhWUbCqtUiZJ_nUaPEDEQCNcBGAsYHQ\/s72-w400-h206-c\/LCI2C_Menu.jpg","height":"72","width":"72"},"thr$total":{"$t":"100"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-2850203519181454122"},"published":{"$t":"2020-08-01T17:40:00.004+03:00"},"updated":{"$t":"2020-11-25T13:08:31.727+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"atmega328p"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энергопотребление"}],"title":{"type":"text","$t":"Еще раз про энергосбережение"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-TRdWjvBLByc\/XyV28UqXPgI\/AAAAAAAABNA\/AlvXllC3d-Yx5wuwN3rvY0qCgRPacitEgCNcBGAsYHQ\/s256\/PowerSaving.png\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" data-original-height=\"256\" data-original-width=\"256\" src=\"https:\/\/1.bp.blogspot.com\/-TRdWjvBLByc\/XyV28UqXPgI\/AAAAAAAABNA\/AlvXllC3d-Yx5wuwN3rvY0qCgRPacitEgCNcBGAsYHQ\/s0\/PowerSaving.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003EЯ уже затрагивал данную тему в прошлых публикациях. Сегодня я хочу обобщить основные идеи и привести несколько примеров, которые помогут вам при создании устройств, работающих от аккумуляторов.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EВремя, ёмкость аккумулятора и ток разряда\u003C\/h2\u003EИтак, мы разрабатываем некоторое устройство с автономным источником питания и задались вопросом энергосбережения. С чего начать? Начнем с того, что выделим 3 составляющие, от которых будем отталкиваться: время автономной работы, ёмкость аккумулятора и потребляемый устройством ток. Связь между ними следующая: чем больше ёмкость аккумулятора и меньше ток разряда, тем дольше проработает устройство. Вопрос в том, какие из этих составляющих мы можем изменять: можем ли увеличить ёмкость аккумулятора или она уже продиктована габаритами устройства и нам остаётся максимально уменьшить потребляемый ток; хотим ли, чтобы устройство проработало год или достаточно недели автономной работы. Здесь нам помогут онлайн калькуляторы, вычисляющие время работы аккумулятора при заданной ёмкости и токе разряда. Например, калькулятор на \u003Ca href=\"https:\/\/voltiq.ru\/services\/battery-life-calculator\/\" target=\"_blank\"\u003Eэтом\u003C\/a\u003E сайте для аккумулятора ёмкостью 1000мАч и тока 15мА прогнозирует время работы 46 часов:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-21ZsMvq1RSg\/XnBsfPcc-NI\/AAAAAAAABGs\/_aViZ7Ywy5A90OlnofljuKRBe2gH_LKmQCK4BGAYYCw\/s1600\/battery-life-calculator.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"372\" src=\"https:\/\/3.bp.blogspot.com\/-21ZsMvq1RSg\/XnBsfPcc-NI\/AAAAAAAABGs\/_aViZ7Ywy5A90OlnofljuKRBe2gH_LKmQCK4BGAYYCw\/s640\/battery-life-calculator.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EРасчет времени работы аккумулятора в онлайн калькуляторе\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EРазумеется, не стоит воспринимать такие результаты как точный ответ. Но для грубой оценки они вполне годятся. Уже сейчас можно понять, что платы Ардуино, ток потребления которых составляет 15-30мА, не смогут работать от аккумулятора продолжительное время. Да, есть способы уменьшить потребляемый ими ток и в каких-то случаях это сработает. Но если требуется действительно долгое время работы от аккумулятора, то единственный вариант - это использование отдельного микроконтроллера. Для сравнения ATmega328P при тактовой частоте 8МГц и питании от литиевого аккумулятора потребляет около 4мА в активном режиме и менее 0,2мкА в режиме Power-Down. Таким образом ёмкости 1000мАч хватило бы, чтобы микроконтроллер проспал десятки лет - скорее аккумулятор потеряет свою ёмкость из-за старения и саморазряда.\u003Cbr \/\u003E\u003Cbr \/\u003EНебольшое отступление. В своих публикациях я всегда привожу ссылки на даташиты микросхем, о которых идет речь. Я понимаю, что для многих подобная документация - темный лес. И всё-таки рекомендую начать заглядывать в нее. Так для AVR микроконтроллеров в разделе \u003Ci\u003ETypical Characteristics\u003C\/i\u003E можно найти массу полезной информации: зависимости тока от тактовой частоты и напряжения, потребление в различных режимах энергосбережения, минимальное напряжение питания при заданной частоте и многое другое. Это то, чем нужно уметь пользоваться, если вы хотите понять, как продлить время работы устройства от аккумулятора. На всякий случай \u003Ca href=\"https:\/\/drive.google.com\/open?id=1Xt0RYvwqFw5yUrxynW98DuA5ALcIMNaz\" target=\"_blank\"\u003Eдаташит на ATmega328P\u003C\/a\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003EС определением примерного времени работы от аккумулятора разобрались. С ёмкостью тоже всё понятно - чем больше, тем лучше. Как уменьшить ток? Оцените по даташиту или измерьте мультиметром ток, потребляемый отдельными компонентами устройства. Необходимо выявить наиболее прожорливые компоненты и понять, какие есть варианты для уменьшения потребляемого ими тока. Ранее я уже писал о способах снижения энергопотребления Ардуино. Это уменьшение питающего напряжения (актуально как для Ардуино, так и для всех компонентов в целом), понижение тактовой частоты и использование режимов энергосбережения. Последние кстати могут присутствовать не только в микроконтроллерах, но и других микросхемах. Однако не обязательно, что они будут реализованы в используемых библиотеках. Поэтому целенаправленно ищите информацию об энергосбережении (Power Consumption, Sleep) в даташите компонента. Ну или хотя бы в интернете - тоже вариант.\u003Cbr \/\u003E\u003Cbr \/\u003EНекоторые микросхемы имеют вход, разрешающий их работу. Он может называться ENABLE, EN, CHIP ENABLE, SHUTDOWN. Подав на этот вход сигнал нужного уровня, можно запретить работу микросхемы, уменьшив таким образом ее энергопотребление. Если микросхема распаяна на плате, то есть перед нами некоторый модуль, то данный вход уже может быть соединен с землей или питанием и не выведен как внешний контакт модуля. В этом случае всё ещё можно подпаяться к выводу микросхемы и разрешать ее работу программно, если перерезать дорожку, идущую от этого вывода к линии питания или к земле. И, наконец, можно просто отключить питание компонента и включать его только при необходимости. Об этом чуть позже, а пока вернемся к микроконтроллерам и Ардуино.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EУменьшение напряжения питания и тактовой частоты микроконтроллера\u003C\/h2\u003EДанная тема подробно рассмотрена в \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2018\/02\/PowerConsumption.html\" target=\"_blank\"\u003Eэтой\u003C\/a\u003E статье, поэтому сейчас вкратце отметим основные моменты. Взгляните на следующий график из \u003Ca href=\"https:\/\/drive.google.com\/open?id=1Xt0RYvwqFw5yUrxynW98DuA5ALcIMNaz\" target=\"_blank\"\u003Eдаташита на ATmega328P\u003C\/a\u003E, он отражает зависимость потребляемого микроконтроллером тока от тактовой частоты и напряжения питания:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-VuprCWvO-ME\/XnCAyhuWHKI\/AAAAAAAABHk\/X37pdedzlvcDek7ZevG7Cu0UTk2QWnhywCK4BGAYYCw\/s1600\/current-vs-freq.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"352\" src=\"https:\/\/3.bp.blogspot.com\/-VuprCWvO-ME\/XnCAyhuWHKI\/AAAAAAAABHk\/X37pdedzlvcDek7ZevG7Cu0UTk2QWnhywCK4BGAYYCw\/s640\/current-vs-freq.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EЗависимость потребляемого микроконтроллером ATmega328P тока от частоты и напряжения\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EИз графика видно, что потребляемый микроконтроллером ток падает при уменьшении напряжения питания и тактовой частоты. С уменьшением напряжения снижается и максимальная частота, на которой может работать микроконтроллер. Поэтому не стоит рассчитывать на корректную работу микроконтроллера с резонатором, скажем, на 16МГц при напряжении 3 вольта.\u003Cbr \/\u003E\u003Cbr \/\u003EИтак, чтобы уменьшить энергопотребление микроконтроллера, нужно:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EОпределиться с резонатором, т.е. тактовой частотой, необходимой для данного приложения. Если нет серьезных требований к её стабильности, то можно настроить микроконтроллер на тактирование от внутреннего генератора 8МГц. Не забываем также о возможности деления тактовой частоты на 8 путём установки фьюза CKDIV8.\u003C\/li\u003E\u003Cli\u003EДля выбранной тактовой частоты оценить по вышеприведенному графику необходимое для микроконтроллера напряжение. Если оно сильно отличается от напряжения источника питания (как в меньшую, так и в большую сторону), то здесь помогут dc-dc преобразователи.\u003C\/li\u003E\u003Cli\u003EТактовую частоту можно изменять в ходе работы программы путём установки значения предделителя. Однако следует помнить, что это повлияет на тактирование большинства периферийных устройств: таймеров\/счетчиков, модулей SPI, USART, АЦП и других.\u003C\/li\u003E\u003C\/ul\u003E\u003Ch2 style=\"text-align: left;\"\u003EСпящий режим и пробуждение микроконтроллера\u003C\/h2\u003EДоступные для Ардуино (ATmega328P) режимы энергосбережения, а также события, пробуждающие микроконтроллер, с примерами кода я приводил ранее в статье\u0026nbsp;\u003Ca href=\"http:\/\/tsibrov.blogspot.com\/2018\/02\/arduino-power-down.html\" target=\"_blank\"\u003EРежимы энергосбережения Ардуино\u003C\/a\u003E. Перевод плат Ардуино в сон не даст такой экономии, как в случае с отдельным микроконтроллером, поскольку кроме него на плате присутствуют другие потребители, которые продолжают работать, светиться и греться. Можно, конечно, выпаять из Ардуино всё лишнее. Некоторые именно так и поступают.\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EВ проектах, где требуется периодическое пробуждение микроконтроллера, отличными помощниками становятся RTC модули с возможностью установки будильника. Их можно запрограммировать на генерацию запроса прерывания, который разбудит микроконтроллер в нужный момент. О применении для этих целей модуля на базе DS3231 можете почитать в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2020\/09\/ds3231.html\" target=\"_blank\"\u003EDS3231 - будильник для Ардуино\u003C\/a\u003E.\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003C\/h3\u003E\u003Ch2 style=\"text-align: left;\"\u003EВнешние компоненты, питание от МК\u003C\/h2\u003EЕсли в компонентах нет спящего режима и вывода ENABLE или они не обеспечивают нужного уровня энергосбережения, то можно просто отключать питание данных компонентов. Для этих целей идеально подходят полевые транзисторы, они экономичны и способны коммутировать значительные токи. А в тех случаях, когда речь идет о нескольких миллиамперах, можно обойтись без транзисторов и запитать компонент непосредственно от микроконтроллера, как на следующей схеме:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-zyLQdJcocC4\/XoM2-hkeTwI\/AAAAAAAABII\/ZWCKBfmPWsA-t8FQgsfvz8f6Ei_rFi1pgCK4BGAYYCw\/s1600\/Power_By_Arduino.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" height=\"448\" src=\"https:\/\/2.bp.blogspot.com\/-zyLQdJcocC4\/XoM2-hkeTwI\/AAAAAAAABII\/ZWCKBfmPWsA-t8FQgsfvz8f6Ei_rFi1pgCK4BGAYYCw\/s640\/Power_By_Arduino.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EDHT22 потребляет не более 1,5 мА и может быть запитан цифровым выводом микроконтроллера\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EНа этой схеме вывод Vcc датчика DHT22\u0026nbsp; подключен не к питанию, а к выводу D3 Ардуино. Чтобы подать напряжение на компонент, переводим вывод D3 в режим OUTPUT и устанавливаем на нем сигнал высокого уровня. Чтобы снять напряжение, переводим вывод в режим INPUT. Не лишним также будет перевести в режим INPUT вывод D2, чтобы исключить возможность паразитного питания. Таким образом, при переходе микроконтроллера в спящий режим можно отключить DHT22, чтобы он зря не работал.\u003Cbr \/\u003E\u003Cbr \/\u003EКонечно, нужно иметь в виду, что одни компоненты входят в свой рабочий режим сразу при подаче питания, другим же требуется предварительная инициализация. То есть после подачи на них питания нужно будет выполнить некоторый код, который, как правило, размещают в функции setup() IDE Arduino.\u003Cbr \/\u003E\u003Cbr \/\u003EВ описанном способе нет ничего ужасного, он вполне рабочий. Только нужно помнить о нагрузочной способности портов микроконтроллера, а так же о том, что с увеличением нагрузки напряжение на выводе падает. Предельно допустимый ток через вывод AVR микроконтроллера (если не всех, то большинства, а вообще смотрим раздел Electrical Characteristics - Absolute Maximum Ratings даташита) составляет 40мА.\u003Cbr \/\u003E\u003Cbr \/\u003EА если нагрузочной способности вывода микроконтроллера не хватает чтобы запитать компонент? Или если не хочется сильно нагружать один вывод, можно ли поделить нагрузку между двумя и более выводами микроконтроллера, соединив их? В принципе можно. В этом случае выводы должны принадлежать одному порту микроконтроллера, чтобы можно было изменять их состояние одновременно. При этом суммарный ток не должен превышать значение, указанное в даташите для данной группы выводов. Но ограничивающим фактором здесь должен быть, конечно, не обозначенный максимум по току, а понимание того, что выводы микроконтроллера не предназначены для этого. Кроме того данный способ уже потенциально опасен: если один из выводов будет установлен в HIGH, а другой по ошибке в LOW, то порт микроконтроллера может сгореть. Можно обезопасить себя от подобного, подвесив к каждому выводу резистор, чтобы ограничить ток через него. Но раз уж дело дошло до дополнительных компонентов, то лучше сразу посмотреть в сторону транзисторов.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EПолевые транзисторы для управления питанием устройств\u003C\/h2\u003EА точнее полевые транзисторы с изолированным затвором, они же МДП-транзисторы (металл-диэлектрик-полупроводник), они же MOSFET (metal-oxide-semiconductor field effect transistor).\u003Cbr \/\u003E\u003Cbr \/\u003EПочему именно полевые? Потому что в отличие от биполярных они управляются не током, а напряжением и расходуют значительно меньше энергии, что для нас актуально. По типу проводимости канала полевые транзисторы разделяются на N-канальные и P-канальные. N-канальные транзисторы\u0026nbsp;открываются, когда к затвору приложено положительное напряжение относительно истока и закрываются, когда приложено отрицательное. P-канальные полевые транзисторы, наоборот, открываются при подаче на затвор отрицательного напряжения относительно истока, а закрываются положительным напряжением. Не будем пока вдаваться в теорию, поскольку это отдельная тема, и рассмотрим сразу схемы ключей на МДП транзисторах:\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EN-канальный полевой транзистор включается между нагрузкой и землей. P-канальный - между нагрузкой и питанием. В закрытом состоянии сопротивление участка сток-исток очень велико и ток через транзистор не течет. Когда к затвору приложено отпирающее напряжение, транзистор открывается и сопротивление сток-исток резко снижается (может составлять десятки миллиОм), соответственно, через нагрузку начинает протекать электрический ток.\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"https:\/\/1.bp.blogspot.com\/-vxZPm6rHTP8\/XyRNEAoKYNI\/AAAAAAAABM0\/tomhhP0176oSKC1aJNv6QFj4Lp2Z3IQtwCNcBGAsYHQ\/s1080\/MOSFET%2Bkey.png\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg border=\"0\" data-original-height=\"530\" data-original-width=\"1080\" height=\"314\" src=\"https:\/\/1.bp.blogspot.com\/-vxZPm6rHTP8\/XyRNEAoKYNI\/AAAAAAAABM0\/tomhhP0176oSKC1aJNv6QFj4Lp2Z3IQtwCNcBGAsYHQ\/w640-h314\/MOSFET%2Bkey.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EТиповая схема ключа на МДП-транзисторе (MOSFET'е)\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003EРезистор R1 нужен для защиты вывода микроконтроллера от наводок при коммутации больших нагрузок. В низковольтных схемах необходимости в таком резисторе нет.\u003Cbr \/\u003E\u003Cbr \/\u003EЧтобы полевой транзистор самопроизвольно\u0026nbsp;не открывался под действием помех при отсутствии управляющего сигнала, его затвор подтягивают к земле или питанию. На схеме эту функцию выполняет резистор R2. Таким образом, в момент перезагрузки микроконтроллера и других случаях, когда вывод находится в Z-состоянии, транзистор гарантированно останется закрыт.\u003Cbr \/\u003E\u003Cbr \/\u003EИспользуя ключ на полевом транзисторе, можно отключить питание компонентов (или даже всего устройства, подробности в статье \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2020\/11\/power-button.html\" target=\"_blank\"\u003EКнопка включения питания для Ардуино\u003C\/a\u003E) перед уходом в сон.\u0026nbsp;При выборе транзистора для этих целей обратите внимание на значение параметра напряжение отсечки (Gate Threshold Voltage), оно должно быть меньше напряжения питания микроконтроллера. В противном случае микроконтроллер не сможет открыть данный транзистор. Другой важный параметр - это сопротивление канала в открытом состоянии (Static Drain-Source On-Resistance), чем оно ниже, тем лучше. Остальные параметры для данной задачи не так важны.\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EDC-DC преобразователи\u003C\/h2\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EНоменклатура преобразователей напряжения весьма широка, что позволяет сделать оптимальный выбор для каждого конкретного применения. Так для устройств, работающих от батареек и аккумуляторов, существуют специализированные низковольтные преобразователи. Они экономичны и обладают высоким КПД. Именно такие преобразователи следует использовать при создании устройств, работающих от автономных источников питания.\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EКак было сказано ранее, микросхемы могут иметь вход, разрешающий их работу. Это относится и к микросхемам dc-dc преобразователей. Подавая на такой вход напряжение нужного уровня (в соответствии с даташитом), можно разрешать и запрещать работу преобразователя, то есть управлять питанием его потребителей. Это можно использовать для отключения компонентов, например, перед уходом микроконтроллера в сон, сам преобразователь при этом будет потреблять очень малый ток. Таким образом это еще один вариант энергосбережения, который следует иметь в виду.\u0026nbsp;\u003C\/div\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch2 style=\"text-align: left;\"\u003EЗаключение\u003C\/h2\u003E\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EПожалуй, это всё, о чём я хотел рассказать в рамках данной статьи. Может быть что-то упустил, не договорил, но основное направление задано: уменьшаем напряжение и ток, грамотно подходим к выбору компонентов и не ленимся заглядывать в их техническую документацию.\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/2850203519181454122\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/06\/power-consumption-tips.html#comment-form","title":"Комментарии: 5"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2850203519181454122"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2850203519181454122"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2020\/06\/power-consumption-tips.html","title":"Еще раз про энергосбережение"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/1.bp.blogspot.com\/-TRdWjvBLByc\/XyV28UqXPgI\/AAAAAAAABNA\/AlvXllC3d-Yx5wuwN3rvY0qCgRPacitEgCNcBGAsYHQ\/s72-c\/PowerSaving.png","height":"72","width":"72"},"thr$total":{"$t":"5"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-4390016895923810112"},"published":{"$t":"2019-11-08T11:29:00.003+03:00"},"updated":{"$t":"2020-01-21T19:10:30.789+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"lcd"},{"scheme":"http://www.blogger.com/atom/ns#","term":"RDA5807M"},{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"микросхема"},{"scheme":"http://www.blogger.com/atom/ns#","term":"подключение"},{"scheme":"http://www.blogger.com/atom/ns#","term":"энкодер вращения"}],"title":{"type":"text","$t":"Радио на RDA5807M. Часть 1"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-QPphE8A9DMs\/XbFw6G_Y_pI\/AAAAAAAAA-4\/k8eezPUmeNwBTs-iSMFOc2FxoyfvE7SAgCK4BGAYYCw\/s1600\/RRD102v2.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"RDA5807M Arduino\" border=\"0\" height=\"347\" src=\"https:\/\/4.bp.blogspot.com\/-QPphE8A9DMs\/XbFw6G_Y_pI\/AAAAAAAAA-4\/k8eezPUmeNwBTs-iSMFOc2FxoyfvE7SAgCK4BGAYYCw\/s400\/RRD102v2.jpg\" title=\"\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EМикросхема RDA5807M - это FM радиоприемник нового поколения с поддержкой RDS\/RBDS и цифровым управлением по I2C. Микросхема выполнена по CMOS технологии, что определяет ее минимальное энергопотребление. RDA5807M уже содержит все необходимые узлы и требует лишь небольшого числа внешних компонентов. А мощный аудиопроцессор обеспечивает оптимальное качество звука при различных условиях приема. Все это делает RDA5807M удачным выбором для носимых, портативных устройств.\u003C\/div\u003E\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EВ интернет магазинах распространен модуль RRD-102v2, на котором распаяны RDA5807M, кварцевый резонатор и пара компонентов обвязки. В данной статье я опишу как подключить этот модуль к Ардуино и что нужно знать для создания радиоприемника на его основе.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EХарактеристики RDA5807M\u003C\/h2\u003EСразу даю ссылку на даташит: \u003Ca href=\"https:\/\/drive.google.com\/open?id=12CnuAHVu1wTB-V42NQR3Zv26j4IddbN_\" target=\"_blank\"\u003ERDA5807M_datasheet_v1.1\u003C\/a\u003E, наиболее полную информацию о характеристиках RDA5807M вы можете найти в нем. Я перечислю некоторые из них:\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EНапряжение питания 2.7 - 3.3В\u003C\/li\u003E\u003Cli\u003EПотребляемый ток (при напряжении питания 3В):\u003C\/li\u003E\u003Cul\u003E\u003Cli\u003Eв рабочем режиме - не более 20мА\u003C\/li\u003E\u003Cli\u003Eв режиме сна - не более 15мкА\u003C\/li\u003E\u003C\/ul\u003E\u003Cli\u003EДиапазон принимаемых частот 50 - 115МГц\u003C\/li\u003E\u003Cli\u003EВыбираемый шаг изменения частоты: 200кГц, 100кГц, 50кГц, 25кГц\u003C\/li\u003E\u003Cli\u003EВыбираемый источник тактового сигнала: внешний или внутренний генератор (для внутреннего генератора требуется резонатор 32.768кГц)\u003C\/li\u003E\u003Cli\u003EПоддержка RDS\/RBDS\u003C\/li\u003E\u003Cli\u003EУправление по шине I2C\u003C\/li\u003E\u003Cli\u003EВозможность прямого подключения нагрузки от 32Ом\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003EДиапазон напряжения питания не самый удобный, например, от лития без стабилизации запитать не получится. Зато наушники можно подключать прямо к выводам микросхемы, дополнительное усиление не требуется. Также можно отметить небольшой потребляемый ток микросхемы, что позволяет запитывать ее от цифрового вывода микроконтроллера (по крайней мере AVR) в тех случаях, когда требуется отключение питания радио в целях энергосбережения.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EРаспиновка и подключение к Ардуино\u003C\/h2\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-HfinANqgXvY\/XbnIcN8WzzI\/AAAAAAAAA_U\/WOKHzC8I9iEbpjyOc_SRg0k5zCxTXLr4QCK4BGAYYCw\/s1600\/RRD102v2%2BRDA5807M%2Bpinout.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"RRD-102v2 (RDA5807M) pinout\" border=\"0\" height=\"329\" src=\"https:\/\/2.bp.blogspot.com\/-HfinANqgXvY\/XbnIcN8WzzI\/AAAAAAAAA_U\/WOKHzC8I9iEbpjyOc_SRg0k5zCxTXLr4QCK4BGAYYCw\/s640\/RRD102v2%2BRDA5807M%2Bpinout.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EРаспиновка RRD-102v2\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-kg_3jO7-q9M\/XbnbxplvFkI\/AAAAAAAAA_g\/r65OZlHkgyggO_1QM6KMrKjwvyq0MvHcQCK4BGAYYCw\/s1600\/RDA5807M%2BArduino.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"RRD-102v2 (RDA5807M) подключение к Arduino\" border=\"0\" height=\"320\" src=\"https:\/\/1.bp.blogspot.com\/-kg_3jO7-q9M\/XbnbxplvFkI\/AAAAAAAAA_g\/r65OZlHkgyggO_1QM6KMrKjwvyq0MvHcQCK4BGAYYCw\/s640\/RDA5807M%2BArduino.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EПодключение RRD-102v2 (RDA5807M) к Ардуино\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EВыводы SDA и SCL модуля подключаются к одноименным выводам Ардуино. Для платы Uno это пины A4 и A5 соответственно. Их уровни превышают напряжение питания RDA5807M, но это не критично, микросхема отлично работает без преобразователя уровней. Питание берем с вывода 3v3.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EИнтерфейс управления\u003C\/h2\u003EЗдесь я хочу обратить внимание на имеющуюся в технической документации неточность (даташит на эту микросхему вообще очень мутный): в ней говорится, что I2C адрес микросхемы 0x10h, что внутренние адреса ее регистров не видны и что чтение и запись выполняются последовательно, начиная с фиксированного стартового адреса (0x0Ah для чтения, 0x02h для записи). После каждой операции чтения\/записи происходит инкремент внутреннего счетчика и очередная операция будет выполняться уже для следующего регистра. Так до тех пор, пока внутренний счетчик не дойдет до верхней границы 0x3Ah, после этого он вернется к своему начальному значению.\u003Cbr \/\u003E\u003Cbr \/\u003EНа самом деле RDA5807M отзывается на три I2C адреса, в чем легко убедиться, воспользовавшись \u003Ca href=\"https:\/\/gist.github.com\/tfeldmann\/5411375\" target=\"_blank\"\u003EI2C сканером\u003C\/a\u003E:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-_X3xb2y-FH8\/XaQekTvDJRI\/AAAAAAAAA9s\/rGqlp_SKhh0uj6bpEm8RWjfd_h0pWeAmwCK4BGAYYCw\/s1600\/RDA5807_I2C_Addr.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"I2C адреса микросхемы RDA5807M\" border=\"0\" height=\"292\" src=\"https:\/\/3.bp.blogspot.com\/-_X3xb2y-FH8\/XaQekTvDJRI\/AAAAAAAAA9s\/rGqlp_SKhh0uj6bpEm8RWjfd_h0pWeAmwCK4BGAYYCw\/s640\/RDA5807_I2C_Addr.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EI2C адреса RDA5807M\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cb\u003EАдрес 0x10h\u003C\/b\u003E используется для последовательного обращения к регистрам, как было описано выше.\u003Cbr \/\u003E\u003Cb\u003EАдрес 0x11h\u003C\/b\u003E позволяет обращаться к произвольным регистрам.\u003Cbr \/\u003E\u003Cb\u003EАдрес 0x60h\u0026nbsp;\u003C\/b\u003Eпозволяет работать с RDA5807M в режиме совместимости с TEA5767.\u003Cbr \/\u003E\u003Cbr \/\u003EУпоминание адреса 0x11h можно найти в документе \u003Ca href=\"https:\/\/drive.google.com\/open?id=1XeAi9vhwDasjLHQV-AXKCNmdTF7kFkHd\" target=\"_blank\"\u003ERDA5807P_ProgManual_1.0\u003C\/a\u003E. Хоть он и предназначен для другой микросхемы, но практически всё применимо и для RDA5807M. Ниже приведен фрагмент из данного документа, описывающий формат I2C обмена при использовании адреса 0x11h:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-rbQHE-nFCIA\/XaSTPGXoBlI\/AAAAAAAAA94\/9sF3Lpf27NI-v-RSPJcRd2KuXXJgeXYIACK4BGAYYCw\/s1600\/RDA5807_I2C_Format.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"Формат обмена RDA5807M I2C 0x11h\" border=\"0\" height=\"320\" src=\"https:\/\/3.bp.blogspot.com\/-rbQHE-nFCIA\/XaSTPGXoBlI\/AAAAAAAAA94\/9sF3Lpf27NI-v-RSPJcRd2KuXXJgeXYIACK4BGAYYCw\/s640\/RDA5807_I2C_Format.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EФормат обмена с RDA5807M по I2C адресу 0x11h\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EКак можно видеть, при записи в режиме произвольного доступа первым передается адрес интересующего регистра (REGISTER ADDRESS), затем старший и младший байты данных. Для чтения содержимого регистра из RDA5807M микроконтроллер сначала передает его адрес, затем считывает старший и младший байты. Чуть позже я приведу пример чтения\/записи регистров, а пока разберемся с их назначением.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EРегистры RDA5807M\u003C\/h2\u003EУправление работой RDA5807M заключается в обращении к его регистрам: изменяя одни регистры, мы производим необходимые нам настройки; из других можно читать различную информацию (флаги, данные RDS и т.д.). Регистры 16-разрядные, их адреса и назначение приведены в \u003Ca href=\"https:\/\/drive.google.com\/open?id=12CnuAHVu1wTB-V42NQR3Zv26j4IddbN_\" target=\"_blank\"\u003Eдаташите\u003C\/a\u003E. Описание весьма скудное, поэтому я решил сам \"пощупать\" каждый регистр, чтобы понять какой бит за что отвечает. Для этого была написана следующая программа:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-HAQTO9iwnpY\/XatSCNTmSdI\/AAAAAAAAA-Y\/8zeHI5nc8vsaHrIAeQnjnSt4HsFBQVYZgCK4BGAYYCw\/s1600\/RDA5807M_software.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"Программа для PC RDA5807M \" border=\"0\" height=\"488\" src=\"https:\/\/4.bp.blogspot.com\/-HAQTO9iwnpY\/XatSCNTmSdI\/AAAAAAAAA-Y\/8zeHI5nc8vsaHrIAeQnjnSt4HsFBQVYZgCK4BGAYYCw\/s640\/RDA5807M_software.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EУправление работой RDA5807M с компьютера\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EДанная программа читает значения регистров RDA5807M, отображает в удобном виде и позволяет изменять их, щелкая мышью по элементам управления. Ардуино при этом выступает в роли посредника между программой на компьютере и RDA5807M, для этого в нее должен быть загружен соответствующий скетч (вы найдёте его в программе по кнопке \"Скетч для Ардуино\"). Очень рекомендую попробовать данную программу, чтобы разобраться с назначением регистров. Скачать ее можно \u003Ca href=\"https:\/\/clc.to\/RDA5807M_software\" target=\"_blank\"\u003Eздесь\u003C\/a\u003E. И, чтобы совсем не осталось вопросов по управлению RDA5807M, привожу описание регистров на понятном языке.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable style=\"width: 751px;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003EРегистр\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003EБиты\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EИмя\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EНазначение\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003EЗначение\u003Cbr \/\u003Eпо умолчанию\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cstrong\u003E00h\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ECHIP_ID\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EChip ID - Идентификатор микросхемы. Есть у меня основания полагать, что значение ChipID состоит именно из двух байт, а не одного, как это указано в даташите.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0x5804\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cstrong\u003E02h\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EDHIZ\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EAudio Output High-Z Disable. Управляет состоянием аудио выводов: 0 - выводы находятся в высокоимпедансном состоянии; 1 - переводит выводы в рабочий режим.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E14\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EDMUTE\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EMute Disable - отключение режима mute, который по умолчанию включен (значение 0). Для отключения mute в этот бит следует записать 1.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E13\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EMONO\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EПринудительное моно, включается записью в данный бит значения 1\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBASS\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EBass Boost - усиление басов. Для включения данной опции необходимо записать 1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E11\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERCLK_NON_\u003Cbr \/\u003ECALIBRATE_\u003Cbr \/\u003EMODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЕсли я правильно понял, этот бит отключает температурную компенсацию тактового генератора, в результате чего RDA5807M не сможет работать в заявленном температурном диапазоне (-20..70C) и сможет поддерживать колебания температуры только на +\/- 20C от точки настройки.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E10\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERCLK_DIRECT_\u003Cbr \/\u003EINPUT_MODE\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБит RCLK Direct Input Mode следует установить в 1, если используется внешний тактовый сигнал\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E9\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESEEKUP\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek Up - направление поиска радиостанций: 0 - к нижней границе диапазона; 1 - вверх.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E8\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESEEK\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗапись 1 в этот бит запускает процесс поиска радиостанции. Поиск ведется в направлении, заданном битом SEEKUP, до нахождения радиостанции или до прохождения всего диапазона частот, после чего данный бит сбрасывается и устанавливается бит STC.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E7\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESKMODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek Mode. Определяет поведение при достижении границы диапазона во время поиска радиостанций: 0 - продолжить поиск с другой границы; 1 - прекратить поиск\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E6:4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ECLK_MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EПозволяет выбрать частоту внешнего тактового сигнала. Возможны следующие значения:\u003Cbr \/\u003E000 = 32.768кГц\u003Cbr \/\u003E001 = 12МГц\u003Cbr \/\u003E101 = 24МГц\u003Cbr \/\u003E010 = 13МГц\u003Cbr \/\u003E110 = 26МГц\u003Cbr \/\u003E011 = 19.2МГц\u003Cbr \/\u003E111 = 38.4МГц\u003Cbr \/\u003EПри указании неверного значения ничего страшного не произойдет, просто FM приемник не сможет настраиваться на частоту и выполнять поиск радиостанций.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E3\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDS_EN\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ERDS\/RBDS Enable. Запись 1 в этот бит включает прием RDS\/RBDS сообщений.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E2\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ENEW_METHOD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ENew Demodulation Method Enable - установка этого бита задействует новый метод демодуляции, способный улучшить чувствительность приемника\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESOFT_RESET\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EПрограммный сброс RDA5807M. Установка бита в 1 приведет к сбросу всех внутренних регистров к значениям по умолчанию. Сброс выполняется автоматически при включении питания микросхемы, нет необходимости сбрасывать устройство дополнительно.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EENABLE\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EPower Up Enable - разрешение работы. Установка в 1 переводит приемник в рабочий режим; 0 - спящий режим - отключает питание внутренних узлов, состояние регистров при этом сохраняется, после возвращения в рабочий режим необходимо выполнить TUNE для настройки на радиостанцию.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cstrong\u003E03h\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:6\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ECHAN\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EChannel Select - выбор канала. Частота радиостанции устанавливается не явно, а путем изменения значения CHAN, которое при умножении на SPACE и прибавления нижней границы диапазона дает итоговую частоту. \u003Cb\u003EДля записи CHAN необходимо также установить бит TUNE, в противном случае CHAN не изменится.\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0x00\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E5\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EDIRECT_MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EРежим прямого управления, который используется только при тестировании - это описание из даташита, не уверен, что данный бит имеет отношение к RDA5807M.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ETUNE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗапись в этот бит значения 1 запускает процесс настройки. По окончании настройки устанавливается бит STC, бит TUNE при этом сбрасывается.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E3:2\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBAND\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EВыбор полосы. Возможно одно из четырех значений:\u003Cbr \/\u003E00 - 87..108МГц\u003Cbr \/\u003E01 - 76..91МГц\u003Cbr \/\u003E10 - 76..108МГц\u003Cbr \/\u003E11 - 65..76МГц или 50..65МГц (определяется битом 65M_50M MODE регистра 07h)\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E00\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E1-0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESPACE\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗадает шаг изменения частоты. Возможны следующие значения:\u003Cbr \/\u003E00 - 100кГц\u003Cbr \/\u003E01 - 200кГц\u003Cbr \/\u003E10 - 50кГц\u003Cbr \/\u003E11 - 25кГц\u003Cbr \/\u003EВ большинстве стран частоты радиостанций разнесены на 200кГц или 100кГц. Поэтому, скорее всего, вам не придется менять значение по умолчанию. Установив шаг 50кГц или 25кГц, вы лишь замедлите процесс поиска радиостанций.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;00\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u0026nbsp;\u003Cstrong\u003E04h\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБиты зарезервированы\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E11\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EDE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EDe-emphases. Определяет значение постоянной времени для\u0026nbsp; частотных предыскажений:\u003Cbr \/\u003E0 - 75мкс\u003Cbr \/\u003E1 - 50мкс\u003Cbr \/\u003EПредыскажения подразумевают усиление высоких частот сигнала при передаче (pre-emphasis) с целью уменьшения воздействия на них помех и последующее восстановление исходного сигнала в приемнике (ослабление высоких частот - de-emphases). В большинстве стран (в т.ч. в Европе и РФ) используется значение 50. В Северной и Южной Америке, в Южной Корее - 75.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E10\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗарезервирован\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E9\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESOFTMUTE_EN\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESoft Mute Enable - приглушение звука, может быть использовано для минимизации шумов в условиях слабого приема. Функция включается установкой бита в 1.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E8\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EAFCD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EAutomatic Frequency Control Disable - отключение автоматической подстройки частоты.\u003Cbr \/\u003E0 - AFC работает\u003Cbr \/\u003E1 - AFC выключено.\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cstrong\u003E05h\u003C\/strong\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EINT_MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EРежим генерации прерывания при завершении поиска\/настройки. Данный бит определен в даташите, но не имеет отношения к RDA5807M. Актуален для микросхем с дополнительными выводами GPIO, например, RDA5807P.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E14:12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБиты зарезервированы\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E000\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E11:8\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESEEKTH\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek Threshold. Данные биты задают порог отношения сигнал\/шум при выполнении поиска радиостанций.\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u0026nbsp;1000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E7:6\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ELNA_PORT_SEL\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ELow Noise Amplifier Port Selection - эти биты пропущены в даташите RDA5807M. При этом они весьма важны, поскольку определяют источник сигнала для приемника (смотрите блок LNA на функциональной схеме приемника в даташите):\u003Cbr \/\u003E00 - нет входа\u003Cbr \/\u003E01 - LNAN (земля)\u003Cbr \/\u003E10 - LNAP (вход FMIN)\u003Cbr \/\u003E11 - оба источника\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E10\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E5:4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБиты зарезервированы\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E00\u0026nbsp;\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E3:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EVOLUME\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EРегулировка громкости\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E1011\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E06h\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗарезервирован\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E14:13\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EOPEN_MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EДанные биты указаны в даташите, но они неактуальны для RDA5807M. В других микросхемах серии установка этих битов в 11 разрешает изменение остальных битов регистра, отвечающих за настройку I2S (Audio Data Interface).\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E00\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E07h\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗарезервирован\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E14:10\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ETH_SOFTBLEND\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESoft Blend Thershold - настройка уровня шумоподавления.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E10000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E9\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003E65M_50M MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EДанный бит определяет используемый диапазон частот, когда биты BAND содержат значение 11:\u003Cbr \/\u003E0 - 50..76МГц\u003Cbr \/\u003E1 - 65..76МГц\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E8\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EЗарезервирован\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E7:2\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESEEK_TH_OLD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek Threshold Old - по аналогии с SEEKTH данные биты определяют порог при поиске радиостанций, но актуальны только при SEEK_MODE (биты 14:12 регистра 0x20h) = 001 - \"старый\" метод поиска.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E000000\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E1\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESOFTBLEND_EN\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESoft Blend Enable. Данный бит разрешает шумоподавление, уровень которого задан битами TH_SOFTBLEND. Помогает здорово очистить сигнал от помех.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EFREQ_MODE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EРежим задания частоты. Когда данный бит сброшен в 0, результирующая частота определяется как BAND + CHAN * STEP. При FREQ_MODE = 1 частота определяется как BAND + содержимое регистра 08h.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E08h\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EFREQ_DIRECT\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EОпределяет частоту при FREQ_MODE = 1. Результирующая частота является суммой значения данного регистра (в килогерцах) и нижней границы диапазона. Например, при BAND = 00 (87..108МГц) и FREQ_DIRECT = 20300 итоговая частота будет 107,3МГц.\u003Cbr \/\u003EОписание регистра FREQ_DIRECTотсутствует в даташите, вероятно, потому, что такой способ изменения частоты не является штатным.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x0h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Ah\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSR\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ERDS Ready - флаг готовности данных RDS\/RBDS (1 - данные готовы)\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E14\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESTC\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek\/Tune Complete - флаг завершения поиска\/настройки на заданную частоту (1 - операция завершена).\u0026nbsp;\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E13\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ESF\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ESeek Fail - флаг, сигнализирующий о неуспешном выполнении поиска, когда не удалось найти сигнал с RSSI большим порога SEEKTH\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSS\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ERDS Synchronization - индикатор синхронизации RDS.\u003Cbr \/\u003E0 - RDS декодер не синхронизирован;\u003Cbr \/\u003E1 - RDS декодер синхронизирован.\u003Cbr \/\u003EВ даташите указано, что данный флаг обновляется только в verbose (подробном) режиме работы RDS (в противопоставление стандартному, менее информативному режиму), однако не уточняется, какой бит отвечает за выбор режима. Судя по тому, что данный флаг обновляется, как и биты BLERA .. BLERD, RDA5807M по умолчанию работает в подробном режиме RDS.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E11\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBLK_E\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EДанный флаг сообщает о получении E блока.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E10\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EST\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EStereo Indicator.\u003Cbr \/\u003E0 - моно;\u003Cbr \/\u003E1 - стерео.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E1\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E9:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EREADCHAN\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003ERead Channel. Эти биты содержат значение CHAN, доступны только для чтения. В режиме последовательного доступа к регистрам RDA5807M стартовый адрес для чтения - 0Ah, таким образом нет возможности прочитать значение CHAN регистра 03h. Этим и обусловлено наличие битов READCHAN.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x0h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Bh\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:9\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSSI\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EReceived Signal Strength Indicator - показатель уровня принимаемого сигнала.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E8\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EFM_TRUE\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EДанный флаг сигнализирует о наличии передачи на текущей частоте. То есть приемник настроен на радиостанцию.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E7\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EFM_READY\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EНасколько я могу судить, данный флаг идентичен флагу STC\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E6:5\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERSVD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБиты зарезервированы\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E00\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E4\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EABCD_E\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EДействующий в США стандарт RBDS помимо блоков A, B, C и D, предусмотренных стандартом RDS,\u0026nbsp; предполагает использование еще одного блока - E. Бит ABCD_E помогает идентифицировать содержимое регистров 0Ch..0Fh как\u0026nbsp; ABCD или E:\u003Cbr \/\u003E0 - A, B, C, D\u003Cbr \/\u003E1 - E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E3:2\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBLERA\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EBlock Errors Level Of A - уровень ошибок в блоке A (RDS) или E (RBDS, когда ABCD_E флаг установлен в 1):\u003Cbr \/\u003E00 - нет ошибок;\u003Cbr \/\u003E01 - 1..2 ошибки требуют коррекции;\u003Cbr \/\u003E10 - 3..5 ошибок\u0026nbsp; требуют коррекции;\u003Cbr \/\u003E11 - более 6 ошибок - блок некорректный и не должен использоваться.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E1:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBLERB\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EBlock Errors Level Of B - уровень ошибок в блоке B (RDS) или E (RBDS, когда ABCD_E флаг установлен в 1). Значения битов аналогичны BLERA.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Ch\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSA\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБлок A (в режиме RDS) или E (в режиме RBDS при ABCD_E = 1).\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x5803h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Dh\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSB\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБлок B (в режиме RDS) или E (в режиме RBDS при ABCD_E = 1).\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x5804h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Eh\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSC\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБлок C (в режиме RDS) или E (в режиме RBDS при ABCD_E = 1).\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x5808h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E0Fh\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:0\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003ERDSD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EБлок D (в режиме RDS) или E (в режиме RBDS при ABCD_E = 1).\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E0x5804h\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cb\u003E10h\u003C\/b\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E15:14\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBLERC\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EBlock Errors Level Of C - уровень ошибок в блоке C (RDS) или E (RBDS, когда ABCD_E флаг установлен в 1). Значения битов аналогичны BLERA.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center; width: 58px;\"\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 42px;\"\u003E13:12\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 108px;\"\u003EBLERD\u003C\/td\u003E\u003Ctd style=\"width: 433px;\"\u003EBlock Errors Level Of D - уровень ошибок в блоке D (RDS) или E (RBDS, когда ABCD_E флаг установлен в 1). Значения битов аналогичны BLERA.\u003C\/td\u003E\u003Ctd style=\"text-align: center; width: 82px;\"\u003E\u003Cbr \/\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cdiv\u003EЭто не все регистры RDA5807M, по старшим адресам доступны другие. Возможно, среди них есть еще что-то интересное. И если вам о них известно, пишите, добавлю их в список.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EПрограммирование RDA5807M\u003C\/h2\u003EДавайте начнем с простенького скетча. Если вы попробуете управлять RDA5807M из моей программы, то обнаружите, что для того чтобы заставить его работать достаточно установить несколько битов: ENABLE, DHIZ, DMUTE, SEEK. Установка последнего запустит поиск радиостанции. Эти же действия можно выполнить программно при помощи следующего скетча:\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  setRegister(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x02\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0xC101\u003C\/span\u003E); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ set ENABLE, DHIZ, DMUTE, SEEK\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E setRegister(uint8_t reg, \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E uint16_t value) {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EbeginTransmission\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x11\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(reg);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EhighByte\u003C\/span\u003E(value));\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ElowByte\u003C\/span\u003E(value));\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EendTransmission\u003C\/span\u003E(true);\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EПодключите RDA5807M к Ардуино по приведенной ранее схеме и залейте в нее скетч. Приемник выполнит поиск и настроится на первую найденную радиостанцию. Бит Tune при этом сбрасывается. Нажатие кнопки Reset на Ардуино и повторное выполнение функции setup будут снова устанавливать этот бит, инициируя поиск следующей станции. Работает? Двигаемся дальше.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003EВ примере скетча выше мы записали в регистр 02h заранее определенное значение. На деле такое требуется редко, разве что для инициализации некоторых регистров. В основном же значения регистров формируются в процессе работы программы при изменении отдельных битов. В таких случаях удобно использовать константы, содержащие номера этих битов или маски для их установки. Ниже приведен пример такого скетча. Он позволяет настроиться на конкретную радиостанцию, установить громкость и получить RSSI.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Einclude\u003C\/span\u003E \u003Cspan class=\"hljs-meta-string\"\u003E\u0026lt;Wire.h\u0026gt;\u003C\/span\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_RANDOM_ACCESS_ADDRESS 0x11\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ регистры\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_REG_CONFIG 0x02\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_REG_TUNING 0x03\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_REG_VOLUME 0x05\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_REG_RSSI   0x0B\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ флаги\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_FLG_DHIZ 0x8000\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_FLG_DMUTE 0x4000\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_FLG_BASS 0x1000\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_FLG_ENABLE word(0x0001)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_FLG_TUNE word(0x0010)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/маски\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_CHAN_MASK 0xFFC0\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_CHAN_SHIFT 6\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_VOLUME_MASK word(0x000F)\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_VOLUME_SHIFT 0\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_RSSI_MASK 0xFE00\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E RDA5807M_RSSI_SHIFT 9\u003C\/span\u003E\u003Cbr \/\u003E\u003Cbr \/\u003Euint8_t volume = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ 0..15\u003C\/span\u003E\u003Cbr \/\u003Euint16_t freq = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1073\u003C\/span\u003E; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ 107.3FM\u003C\/span\u003E\u003Cbr \/\u003Euint16_t reg02h, reg03h, reg05h, reg0Bh;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E9600\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ebegin\u003C\/span\u003E();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Регистр 02h - включение, настройки\u003C\/span\u003E\u003Cbr \/\u003E  reg02h = RDA5807M_FLG_ENABLE | RDA5807M_FLG_DHIZ | RDA5807M_FLG_DMUTE;\u003Cbr \/\u003E  setRegister(RDA5807M_REG_CONFIG, reg02h);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ А потом решили еще усилить басы:\u003C\/span\u003E\u003Cbr \/\u003E  reg02h |= RDA5807M_FLG_BASS;\u003Cbr \/\u003E  setRegister(RDA5807M_REG_CONFIG, reg02h);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Регистр 03h - выбор радиостанции\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ После сброса в регистре 03h значение по умолчанию - 0\u003C\/span\u003E\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Таким образом BAND = 00 (87..108МГц), STEP = 00 (100кГц). Оставим их как есть\u003C\/span\u003E\u003Cbr \/\u003E  reg03h = (freq - \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E870\u003C\/span\u003E) \u0026lt;\u0026lt; RDA5807M_CHAN_SHIFT; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ chan = (freq - band) \/ space\u003C\/span\u003E\u003Cbr \/\u003E  setRegister(RDA5807M_REG_TUNING, reg03h | RDA5807M_FLG_TUNE);\u003Cbr \/\u003E  \u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Регистр 05h. Установим громкость, остальные биты не изменяем\u003C\/span\u003E\u003Cbr \/\u003E  reg05h = getRegister(RDA5807M_REG_VOLUME); \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Считываем текущее значение\u003C\/span\u003E\u003Cbr \/\u003E  reg05h \u0026amp;= ~RDA5807M_VOLUME_MASK; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Сбрасываем биты VOLUME\u003C\/span\u003E\u003Cbr \/\u003E  reg05h |= volume \u0026lt;\u0026lt; RDA5807M_VOLUME_SHIFT; \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Устанавливаем новую громкость\u003C\/span\u003E\u003Cbr \/\u003E  setRegister(RDA5807M_REG_VOLUME, reg05h);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Регистр 0Bh - статус\u003C\/span\u003E\u003Cbr \/\u003E  reg0Bh = getRegister(RDA5807M_REG_RSSI);\u003Cbr \/\u003E  uint8_t \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ERSSI\u003C\/span\u003E = (reg0Bh \u0026amp; RDA5807M_RSSI_MASK) \u0026gt;\u0026gt; RDA5807M_RSSI_SHIFT;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\"RSSI = \"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprint\u003C\/span\u003E(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ERSSI\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ESerial\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eprintln\u003C\/span\u003E(\u003Cspan class=\"hljs-string\" style=\"color: rgb(0 , 92 , 95);\"\u003E\" (0-min, 127-max)\"\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Edelay\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E500\u003C\/span\u003E);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E setRegister(uint8_t reg, \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Econst\u003C\/span\u003E uint16_t value) {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EbeginTransmission\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x11\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(reg);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EhighByte\u003C\/span\u003E(value));\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ElowByte\u003C\/span\u003E(value));\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EendTransmission\u003C\/span\u003E(true);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Euint16_t getRegister(uint8_t reg) {\u003Cbr \/\u003E  uint16_t result;\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EbeginTransmission\u003C\/span\u003E(RDA5807M_RANDOM_ACCESS_ADDRESS);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewrite\u003C\/span\u003E(reg);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EendTransmission\u003C\/span\u003E(false);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003ErequestFrom\u003C\/span\u003E(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0x11\u003C\/span\u003E, \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E, true);\u003Cbr \/\u003E  result = (uint16_t)\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eread\u003C\/span\u003E() \u0026lt;\u0026lt; \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E8\u003C\/span\u003E;\u003Cbr \/\u003E  result |= \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EWire\u003C\/span\u003E.\u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eread\u003C\/span\u003E();\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ereturn\u003C\/span\u003E result;\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EВ этом примере значения регистров получаются установкой отдельных разрядов. Для этого используются определенные в начале скетча флаги и маски. Я описал несколько из них для примера, остальные добавляются по аналогии.\u003Cbr \/\u003E\u003Cbr \/\u003EЧтобы настроить RDA5807M на интересующую частоту необходимо установить значения BAND и SPACE и затем изменять только значение CHAN. Итоговая частота определяется по формуле:\u003Cbr \/\u003E\u003Ci\u003EF = BAND + CHAN * SPACE.\u003C\/i\u003E\u003Cbr \/\u003E\u003Ci\u003E\u003Cbr \/\u003E\u003C\/i\u003EВ скетче используются определенные по умолчанию BAND и SPACE (87..108МГц\u0026nbsp; и 100кГц соответственно). По ним можно определить значение, которое должно быть записано в биты CHAN для получения интересующей частоты. Не забывайте при записи CHAN устанавливать также бит TUNE.\u003Cbr \/\u003E\u003Cbr \/\u003EДля изменения громкости значение регистра 05h считывается из RDA5807M в переменную. Затем осуществляется сброс битов VOLUME. И уже после этого можно устанавливать новое значение громкости и записывать результат в регистр.\u003Cbr \/\u003E\u003Cbr \/\u003EДля получения RSSI выполняются обратные действия: в считанном из регистра 0Bh значении сбрасываются все биты, кроме содержащих RSSI. Затем результат сдвигается вправо, чтобы младший бит RSSI оказался в младшем разряде переменной. Так мы получим нужное нам значение.\u003Cbr \/\u003E\u003Cbr \/\u003EТеперь, когда описаны основные приемы управления RDA5807M, можно приступить к программированию. Нужно лишь определиться с функционалом и интерфейсом.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EДобавим LCD дисплей и энкодер\u003C\/h2\u003EДа, я люблю использовать в своих проектах LCD2004 с I2C интерфейсом и энкодер вращения. Это уже привычные для меня элементы создания пользовательского интерфейса. Используя их, я могу сосредоточиться на текущей задаче, а не заморачиваться с изобретением велосипеда. Поэтому сейчас я добавил их в схему:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-faaSpKgH638\/XcRqR_mBmRI\/AAAAAAAABAU\/J_-t3kiZg38lHJHCLqvGBzHW0vU_FnueACK4BGAYYCw\/s1600\/RDA5807M%2Bradio.png\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"Радио на Arduino и RDA5807M с дисплеем и энкодером\" border=\"0\" height=\"466\" src=\"https:\/\/3.bp.blogspot.com\/-faaSpKgH638\/XcRqR_mBmRI\/AAAAAAAABAU\/J_-t3kiZg38lHJHCLqvGBzHW0vU_FnueACK4BGAYYCw\/s640\/RDA5807M%2Bradio.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EСхема радио с дисплеем и энкодером\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto; text-align: center;\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Ctd style=\"text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-5Hm11ZgzSx4\/XcQxo_SctRI\/AAAAAAAABAI\/sPJPk1Dp5mA2gFZvkBoEvc3HHW81s0PKACK4BGAYYCw\/s1600\/RDA5807%2BArduino%2BRadio.jpg\" imageanchor=\"1\" style=\"margin-left: auto; margin-right: auto;\"\u003E\u003Cimg alt=\"Макет радио RDA5807M с дисплеем и энкодером\" border=\"0\" height=\"360\" src=\"https:\/\/2.bp.blogspot.com\/-5Hm11ZgzSx4\/XcQxo_SctRI\/AAAAAAAABAI\/sPJPk1Dp5mA2gFZvkBoEvc3HHW81s0PKACK4BGAYYCw\/s640\/RDA5807%2BArduino%2BRadio.jpg\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/td\u003E\u003C\/tr\u003E\u003Ctr\u003E\u003Ctd class=\"tr-caption\" style=\"text-align: center;\"\u003EМакет радио с дисплеем и энкодером\u003C\/td\u003E\u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E\u003Cbr \/\u003EИтак, моя текущая задача - это создание радио с базовым функционалом и индикацией. О законченном проекте речь пока не идет. Для меня это скорее знакомство с данным модулем. Поэтому в предлагаемом ниже скетче нет фишек вроде сохранения списка радиостанций в EEPROM. Нет и работы с RDS - использованию этой технологии в RDA5807M я посвящу следующую публикацию. В последствии я планирую сделать радио в оригинальном корпусе с OLED дисплеем. А пока можете оценить результат данного этапа, скетч доступен по \u003Ca href=\"https:\/\/clc.to\/RDA5807M_Arduino\" target=\"_blank\"\u003Eссылке\u003C\/a\u003E. Для работы требуется библиотека\u0026nbsp;\u003Ca href=\"https:\/\/github.com\/VladimirTsibrov\/LiquidCrystal_I2C_Menu\" target=\"_blank\"\u003ELiquidCrystal_I2C_Menu\u003C\/a\u003E, скачайте и установите ее.\u003Cbr \/\u003E\u003Cbr \/\u003EВ скетче реализовано:\u003Cbr \/\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003EПоиск радиостанции вверх\/вниз и отображение частоты\u003C\/li\u003E\u003Cli\u003EРегулировка громкости\u003C\/li\u003E\u003Cli\u003EВвод значения частоты энкодером\u003C\/li\u003E\u003Cli\u003EВыбор поведения при повороте энкодера: регулировка громкости или поиск радиостанции\u003C\/li\u003E\u003Cli\u003EУстановка ряда параметров, отвечающих за звук и шумоподавление\u003C\/li\u003E\u003Cli\u003EСохранение настроек в EEPROM и чтение их при включении радио\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv\u003E\u003Cbr \/\u003EВход в меню осуществляется при нажатии на кнопку энкодера. Кстати, в скетче присутствует код для управления RDA5807M с компьютера из упомянутой ранее программы. Это удобно для отслеживания содержимого регистров в процессе работы радио. Чтобы отключить эту возможность достаточно закомментировать первую строку скетча.\u003C\/div\u003E\u003Cdiv\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv\u003EНа этом пока всё. Продолжение будет в \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2020\/01\/rda5807m-part2-rds.html\" target=\"_blank\"\u003Eследующей публикации\u003C\/a\u003E с обзором RDS.\u003C\/div\u003E\u003C\/div\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/4390016895923810112\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2019\/11\/rda5807m-part1.html#comment-form","title":"Комментарии: 73"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4390016895923810112"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/4390016895923810112"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2019\/11\/rda5807m-part1.html","title":"Радио на RDA5807M. Часть 1"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/4.bp.blogspot.com\/-QPphE8A9DMs\/XbFw6G_Y_pI\/AAAAAAAAA-4\/k8eezPUmeNwBTs-iSMFOc2FxoyfvE7SAgCK4BGAYYCw\/s72-c\/RRD102v2.jpg","height":"72","width":"72"},"thr$total":{"$t":"73"}},{"id":{"$t":"tag:blogger.com,1999:blog-794788004739538112.post-2635717872850172893"},"published":{"$t":"2019-06-24T11:46:00.000+03:00"},"updated":{"$t":"2019-06-24T11:46:07.794+03:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"ардуино"},{"scheme":"http://www.blogger.com/atom/ns#","term":"прерывания"}],"title":{"type":"text","$t":"Немного кодокопания (прерывания, ISR, attachInterrupt)"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EВ продолжение темы о прерываниях в AVR микроконтроллерах предлагаю покопаться в коде, генерируемом компилятором. Это поможет проверить на деле приведенный ранее теоретический материал, а также узнать новые интересные моменты. Для этого потребуется описанная в \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2019\/06\/ide-arduino-disassembling.html\" target=\"_blank\"\u003Eпрошлой публикации\u003C\/a\u003E доработка IDE Arduino для генерации ассемблерного листинга и справочник по языку ассемблера для AVR, доступный по ссылке\u0026nbsp;\u003Ca href=\"http:\/\/ww1.microchip.com\/downloads\/en\/devicedoc\/atmel-0856-avr-instruction-set-manual.pdf\"\u003Ehttp:\/\/ww1.microchip.com\/downloads\/en\/devicedoc\/atmel-0856-avr-instruction-set-manual.pdf\u003C\/a\u003E. Итак, приступим.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Ch2 style=\"text-align: left;\"\u003EТаблица векторов, обработчики прерываний\u003C\/h2\u003EДля начала рассмотрим листинг, генерируемый для пустого скетча с обработчиком прерывания, например, для INT0.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003EISR(INT0_vect) {\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EВставьте приведенный код в IDE Arduino, сохраните его и выполните команду \u003Ci\u003E\"Экспорт бинарного файла\"\u003C\/i\u003E из меню \u003Ci\u003E\"Скетч\"\u003C\/i\u003E. В папке со скетчем появится файл .asm. При его открытии первое что мы увидим - это таблица векторов:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-wNR0OpOKz28\/XQyDd-YKvRI\/AAAAAAAAA3k\/FCBvJ3QH180CUYUjXkR6nLzjOopWicGiQCK4BGAYYCw\/s1600\/assembler%2Bvecors.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Таблица векторов\" border=\"0\" height=\"374\" src=\"https:\/\/4.bp.blogspot.com\/-wNR0OpOKz28\/XQyDd-YKvRI\/AAAAAAAAA3k\/FCBvJ3QH180CUYUjXkR6nLzjOopWicGiQCK4BGAYYCw\/s640\/assembler%2Bvecors.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EПо нулевому адресу расположен вектор сброса, который представляет из себя команду перехода к адресу\u0026nbsp;0x68. С этого адреса начинается наша программа и первая ее команда - это очистка уже знакомого нам регистра r1 (zero-register). В следующей команде он используется для очистки регистра SREG, тем самым сбрасываются флаги и запрещается обработка прерываний. Далее идет инициализация указателя стека, цикл очистки глобальных переменных и, наконец, вызов функции \u003Ci\u003Emain\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003EНо вернемся к таблице векторов. Мы видим, что в ней присутствуют вектора для прерываний INT0 (идет сразу после вектора сброса) и\u0026nbsp;TIMER0_OVF. Последний используется в работе функций \u003Ci\u003Emillis\u003C\/i\u003E, \u003Ci\u003Emicros\u003C\/i\u003E, \u003Ci\u003Edelay\u003C\/i\u003E, он нас сейчас не интересует. Вектора остальных прерываний указывают на обработчик\u0026nbsp;bad_interrupt, также \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2019\/06\/arduino-interrupts-part2.html#%D0%92%D0%B5%D0%BA%D1%82%D0%BE%D1%80%20BADISR_vect\" target=\"_blank\"\u003Eрассмотренный ранее\u003C\/a\u003E. Если мы перейдем к нему, то увидим следующий код:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-QbCU0ssnsig\/XQyS0Y5iW4I\/AAAAAAAAA38\/gcsDshkpX5oSwsqXiYkvv5XezaWZ5QqIQCK4BGAYYCw\/s1600\/Assembler%2BBadInterrupt.png\" imageanchor=\"1\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Обработчик bad_interrupt\" border=\"0\" height=\"98\" src=\"https:\/\/2.bp.blogspot.com\/-QbCU0ssnsig\/XQyS0Y5iW4I\/AAAAAAAAA38\/gcsDshkpX5oSwsqXiYkvv5XezaWZ5QqIQCK4BGAYYCw\/s640\/Assembler%2BBadInterrupt.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EЕдинственная его команда - это переход на нулевой адрес, к вектору сброса.\u003Cbr \/\u003E\u003Cbr \/\u003EДавайте теперь взглянем на код, сгенерированный для нашего обработчика: найдем в листинге метку\u0026nbsp;\u003Ci\u003E__vector_1\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-e_d2D0iesGM\/XQyUQkejeKI\/AAAAAAAAA4I\/bMadqofw3CQVxVe1OYYr2cWsw-U_jLjLQCK4BGAYYCw\/s1600\/Assembler%2BISR.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Обработчик ISR\" border=\"0\" height=\"216\" src=\"https:\/\/4.bp.blogspot.com\/-e_d2D0iesGM\/XQyUQkejeKI\/AAAAAAAAA4I\/bMadqofw3CQVxVe1OYYr2cWsw-U_jLjLQCK4BGAYYCw\/s640\/Assembler%2BISR.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EНаш обработчик не выполняет никаких действий, поэтому в листинге присутствуют только пролог и эпилог. Вы можете поэкспериментировать с параметрами макроса ISR или добавить в обработчик какие-то простые действия, чтобы посмотреть как меняется его код. Ниже приведен код обработчика, который выполняет инкремент глобальной переменной типа byte:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-JhXutamfcx8\/XQyYcRC-U1I\/AAAAAAAAA4U\/hgTyY7RQUk81aO0MFbBby9-Enjubp49wACK4BGAYYCw\/s1600\/Assembler%2BISR%2Bv2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Обработчик ISR\" border=\"0\" height=\"296\" src=\"https:\/\/2.bp.blogspot.com\/-JhXutamfcx8\/XQyYcRC-U1I\/AAAAAAAAA4U\/hgTyY7RQUk81aO0MFbBby9-Enjubp49wACK4BGAYYCw\/s640\/Assembler%2BISR%2Bv2.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EКак видите, в пролог и эпилог обработчика добавился регистр r24. Он используется для загрузки значения переменной из памяти (команда lds), увеличения его на единицу (осуществляется путем вычитания из него значения 255 командой subi), после чего результат помещается обратно в память (команда sts).\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EФункция attachInterrupt\u003C\/h2\u003EА какой код будет произведен для функции \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2019\/05\/arduino-interrupts-part1.html#attachInterrupt\" target=\"_blank\"\u003E\u003Ci\u003EattachInterrupt\u003C\/i\u003E\u003C\/a\u003E? Прежде чем перейти к изменению скетча и генерации листинга на ассемблере предлагаю ознакомиться с реализацией данной функции в IDE Arduino. Откройте файл\u0026nbsp;\u003Ci\u003EArduino_dir\\hardware\\arduino\\avr\\cores\\arduino\\WInterrupts.c\u003C\/i\u003E и найдите в нем указанную функцию. В ее начале происходит помещение указателя на нашу функцию-обработчик в некий массив \u003Ci\u003EintFunc\u003C\/i\u003E:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-zFvrYxkOgeo\/XQyed7x6OyI\/AAAAAAAAA4g\/xU0T-rhFlpgkadRN5y0ApvY64ipgeZL7ACK4BGAYYCw\/s1600\/attachInterrupt%2Bimplementation.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Реализация attachInterrupt в Ардуино\" border=\"0\" height=\"104\" src=\"https:\/\/4.bp.blogspot.com\/-zFvrYxkOgeo\/XQyed7x6OyI\/AAAAAAAAA4g\/xU0T-rhFlpgkadRN5y0ApvY64ipgeZL7ACK4BGAYYCw\/s640\/attachInterrupt%2Bimplementation.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EДалее идут не особо интересные манипуляции с регистрами микроконтроллера для разрешения заданного прерывания. Очевидно, наша функция должна вызываться при возникновении прерывания. Найдем, где идет обращение к массиву\u0026nbsp;\u003Ci\u003EintFunc\u003C\/i\u003E. Поиски приведут нас к макросу\u0026nbsp;\u003Ci\u003EIMPLEMENT_ISR\u003C\/i\u003E, который определяет обработчик для заданного прерывания, который в свою очередь вызывает нужную функцию по указателю из массива\u0026nbsp;\u003Ci\u003EintFunc\u003C\/i\u003E. Обращение к данному макросу идет далее, в блоках условной компиляции:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-ydPUB3D6ioA\/XQyi8qQXrbI\/AAAAAAAAA4s\/Ln-CL9zWAF8NrockX6lliMk6qNhSdsp6ACK4BGAYYCw\/s1600\/IMPLEMENT_ISR.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Реализация attachInterrupt в Ардуино\" border=\"0\" height=\"228\" src=\"https:\/\/4.bp.blogspot.com\/-ydPUB3D6ioA\/XQyi8qQXrbI\/AAAAAAAAA4s\/Ln-CL9zWAF8NrockX6lliMk6qNhSdsp6ACK4BGAYYCw\/s640\/IMPLEMENT_ISR.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EДля платы Uno и других на базе ATmega328\/P будет скомпилирован код, находящийся в ветке #else, что приведет к объявлению двух обработчиков: для\u0026nbsp;INT0_vect и\u0026nbsp;INT1_vect. Давайте проверим это, сгенерировав листинг на ассемблере для следующего скетча:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E my_isr() {\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EattachInterrupt\u003C\/span\u003E(digitalPinToInterrupt(\u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E2\u003C\/span\u003E), my_isr, FALLING);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EВ таблице векторов, действительно, присутствуют вектора для обоих внешних прерываний:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-gBT24Cue02w\/XQyqITPZTnI\/AAAAAAAAA44\/sJXH3B99jD0LktDcXfL4U2Mq32CavtfFgCK4BGAYYCw\/s1600\/attachInterrupt%2Btable.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Функция attachInterrupt\" border=\"0\" height=\"144\" src=\"https:\/\/1.bp.blogspot.com\/-gBT24Cue02w\/XQyqITPZTnI\/AAAAAAAAA44\/sJXH3B99jD0LktDcXfL4U2Mq32CavtfFgCK4BGAYYCw\/s640\/attachInterrupt%2Btable.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EНо интерес для нас представляет другое. Перейдите к реализации обработчика для INT0 (метка \u003Ci\u003E__vector_1\u003C\/i\u003E). Вместо стандартных пролога и эпилога вы увидите код, сохраняющий почти все регистры от r18 до r31. Почему так происходит, давайте разбираться.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/3.bp.blogspot.com\/-1IO_FNULB9U\/XQzPM1XR_XI\/AAAAAAAAA5E\/S5zo4UPAiIUn8lDCPgdjBhOSYLH-KjG1QCK4BGAYYCw\/s1600\/Assembler%2BISR%2BattachInterrupt.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Функция attachInterrupt\" border=\"0\" height=\"374\" src=\"https:\/\/3.bp.blogspot.com\/-1IO_FNULB9U\/XQzPM1XR_XI\/AAAAAAAAA5E\/S5zo4UPAiIUn8lDCPgdjBhOSYLH-KjG1QCK4BGAYYCw\/s640\/Assembler%2BISR%2BattachInterrupt.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EВ AVR GCC принято соглашение об использовании регистров общего назначения. Мы уже знаем, что r0 используется в качестве временного регистра, а r1 (zero-register) содержит 0. Кроме этого регистры делятся на так называемые\u0026nbsp;\u003Cb\u003ECall-Used Registers\u003C\/b\u003E (или call-clobbered) то есть которые могут свободно использоваться функциями и\u0026nbsp;\u003Cb\u003ECall-Saved Registers\u003C\/b\u003E, первоначальное содержимое которых в случае использования функцией должно быть обязательно восстановлено при возврате из нее. К первой группе относятся регистры\u0026nbsp;r18–r27, r30, r31, а также временный регистр r0 и флаг T. Остальные регистры r2–r17, r28, r29 и r1 относятся ко второй группе. Подробнее вы можете прочитать о них по ссылке\u0026nbsp;\u003Ca href=\"https:\/\/gcc.gnu.org\/wiki\/avr-gcc#Register_Layout\" target=\"_blank\"\u003Ehttps:\/\/gcc.gnu.org\/wiki\/avr-gcc#Register_Layout\u003C\/a\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EНаша функция-обработчик\u0026nbsp;\u003Ci\u003Emy_isr \u003C\/i\u003Eпо факту обычная функция. При использовании в ней\u0026nbsp;Call-Used регистров можно быть уверенным, что вызывающая функция не оставила в них важные данные. Но поскольку данная функция вызывается обработчиком прерывания, которое может поступить в любой момент, то в регистрах могут быть еще не обработанные данные. Поэтому обработчик перед вызовом \u003Ci\u003Emy_isr\u0026nbsp;\u003C\/i\u003E сохраняет содержимое этих регистров в стеке. Затем, соответственно, восстанавливает. Это мы и видим в сгенерированном листинге. Аналогичный код будет и для остальных внешних прерываний, в данном случае для INT1. К нему мы не привязывали функцию-обработчик, но по умолчанию к нему уже привязана функция\u0026nbsp;\u003Ci\u003Enothing\u003C\/i\u003E, из файла \u003Ci\u003EWInterrupts.c\u003C\/i\u003E:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Estatic\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E nothing(\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E) {\u003Cbr \/\u003E\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003E\u003Cbr \/\u003EНо, разумеется, она не будет вызываться, поскольку обработка прерывания INT1 у нас не разрешена. Хотя трата памяти программ налицо.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ch2 style=\"text-align: left;\"\u003EКлючевое слово volatile\u003C\/h2\u003EПри рассмотрении ключевого слова \u003Ca href=\"https:\/\/tsibrov.blogspot.com\/2019\/05\/arduino-interrupts-part1.html#volatile\" target=\"_blank\"\u003E\u003Ci\u003Evolatile\u003C\/i\u003E\u003C\/a\u003E я приводил пример скетча с использованием разделяемой переменной в условии выхода из цикла. Давайте сгенерируем для него листинг на ассемблере, чтобы увидеть эффект от использования \u003Ci\u003Evolatile\u003C\/i\u003E. Вот сам скетч:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cpre class=\"hljs\" style=\"background: rgb(255 , 255 , 255); color: rgb(67 , 79 , 84); display: block; overflow-x: auto; padding: 0.5em;\"\u003E\u003Cspan class=\"hljs-meta\" style=\"color: rgb(67 , 79 , 84);\"\u003E#\u003Cspan class=\"hljs-meta-keyword\" style=\"color: rgb(114 , 142 , 0);\"\u003Edefine\u003C\/span\u003E interruptPin 2\u003C\/span\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evolatile\u003C\/span\u003E \u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Ebyte\u003C\/span\u003E f = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Esetup\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EpinMode\u003C\/span\u003E(interruptPin, \u003Cspan class=\"hljs-literal\" style=\"color: rgb(211 , 84 , 0);\"\u003EINPUT_PULLUP\u003C\/span\u003E);\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003EattachInterrupt\u003C\/span\u003E(digitalPinToInterrupt(interruptPin), buttonPressed, FALLING);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Eloop\u003C\/span\u003E() {\u003Cbr \/\u003E  \u003Cspan class=\"hljs-built_in\" style=\"color: rgb(211 , 84 , 0);\"\u003Ewhile\u003C\/span\u003E (f == \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E0\u003C\/span\u003E) {\u003Cbr \/\u003E    \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Что-то делаем в ожидании нажатия кнопки\u003C\/span\u003E\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cspan class=\"hljs-comment\" style=\"color: rgba(149 , 165 , 166 , 0.8);\"\u003E\/\/ Кнопка нажата\u003C\/span\u003E\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan class=\"hljs-keyword\" style=\"color: rgb(0 , 151 , 157);\"\u003Evoid\u003C\/span\u003E buttonPressed() {\u003Cbr \/\u003E  f = \u003Cspan class=\"hljs-number\" style=\"color: rgb(138 , 123 , 82);\"\u003E1\u003C\/span\u003E;\u003Cbr \/\u003E}\u003C\/pre\u003E\u003Cbr \/\u003EА вот фрагмент полученного листинга:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-AOzePQTvyXU\/XRBxFa6UrcI\/AAAAAAAAA5Q\/bsjC5pWYFKQG01V5OGskNq25t8hnGKTHACK4BGAYYCw\/s1600\/Assembler%2Bvolatile.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Ардуино дизассемблирование. Ключевое слово volatile\" border=\"0\" height=\"84\" src=\"https:\/\/4.bp.blogspot.com\/-AOzePQTvyXU\/XRBxFa6UrcI\/AAAAAAAAA5Q\/bsjC5pWYFKQG01V5OGskNq25t8hnGKTHACK4BGAYYCw\/s640\/Assembler%2Bvolatile.png\" title=\"\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EКоманда lds загружает из памяти значение нашей переменной в регистр. Затем содержимое регистра проверяется на 0 путем выполнения логического И с самим собой, результат проверки влияет на флаг нуля Z. Если флаг нуля установлен, то команда breq осуществит переход на 8 байт назад, то есть к началу цикла. В противном случае будет выполнена следующая за breq команда. То есть всё в порядке, цикл работает как и задумывалось. Уберем теперь из объявления переменной f квалификатор \u003Ci\u003Evolatile\u003C\/i\u003E и посмотрим, что получится:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/1.bp.blogspot.com\/-c-k-6Tjwzrs\/XRB1hHY-dhI\/AAAAAAAAA5c\/Jo32Yr928Zc_3h0oPp8kzJbPBonjcsvPACK4BGAYYCw\/s1600\/Assembler%2Bwithout%2Bvolatile.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" height=\"92\" src=\"https:\/\/1.bp.blogspot.com\/-c-k-6Tjwzrs\/XRB1hHY-dhI\/AAAAAAAAA5c\/Jo32Yr928Zc_3h0oPp8kzJbPBonjcsvPACK4BGAYYCw\/s640\/Assembler%2Bwithout%2Bvolatile.png\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003EКак и в прошлый раз значение переменной загружается в регистр r24 для проверки. Команда cpse сравнивает содержимое r24 с r1 (с нулем) и в случае равенства пропускает следующую команду, которой является переход вперед на 2 байта. Этот переход позволяет обойти дальнейший цикл, если r24 не равно нулю. В противном случае программа зайдет в бесконечный цикл: команда rjmp .-2 выполняет переход на саму себя. Таким образом, компилятор, предполагая, что значение переменной f внутри цикла не изменяется, вынес ее проверку за пределы цикла. И изменение значения f в обработчике прерывания не позволит выйти из цикла.\u003Cbr \/\u003E\u003Cbr \/\u003EИтак, мы рассмотрели листинги на ассемблере для различных скетчей и увидели, какой код генерирует компилятор. Его изучение помогает не только проверить теорию, но и выявить места для оптимизации программы. В конце концов это просто интересно, если вы хотите узнать больше о работе Ардуино и AVR микроконтроллеров.\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"https:\/\/tsibrov.blogspot.com\/feeds\/2635717872850172893\/comments\/default","title":"Комментарии к сообщению"},{"rel":"replies","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2019\/06\/code-digging-interrupts.html#comment-form","title":"Комментарии: 1"},{"rel":"edit","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2635717872850172893"},{"rel":"self","type":"application/atom+xml","href":"https:\/\/www.blogger.com\/feeds\/794788004739538112\/posts\/default\/2635717872850172893"},{"rel":"alternate","type":"text/html","href":"https:\/\/tsibrov.blogspot.com\/2019\/06\/code-digging-interrupts.html","title":"Немного кодокопания (прерывания, ISR, attachInterrupt)"}],"author":[{"name":{"$t":"Владимир"},"uri":{"$t":"http:\/\/www.blogger.com\/profile\/07943437233560370294"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"16","height":"16","src":"https:\/\/img1.blogblog.com\/img\/b16-rounded.gif"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/4.bp.blogspot.com\/-wNR0OpOKz28\/XQyDd-YKvRI\/AAAAAAAAA3k\/FCBvJ3QH180CUYUjXkR6nLzjOopWicGiQCK4BGAYYCw\/s72-c\/assembler%2Bvecors.png","height":"72","width":"72"},"thr$total":{"$t":"1"}}]}});